#
#    $HeadURL: http://sscae-srv1.jpl.nasa.gov/svn/ontologies/trunk/gov.nasa.jpl.imce.ontologies/documents/Makefile.erb $
#
#    $Revision: 2179 $
#    $Date: 2011-10-20 17:32:20 -0700 (Thu, 20 Oct 2011) $
#
#    $Author: sjenkins $
#
#    Copyright (c) 2009,2010,2011 California Institute of Technology.
#    All rights reserved.
#

#
# Configuration
#

<%

  require 'ostruct'
  
  class ::String
    def iri
      "http://imce.jpl.nasa.gov/#{self}"
    end
    def namespace
      graph + '#'
    end
  end

  ONTOLOGY_DOCUMENTS = [
   # docid root namespace graph options
    [ 'D-68442', 'foundation/base', 'base' ],
    [ 'D-68443', 'foundation/mission', 'mission' ],
    [ 'D-68444', 'foundation/analysis', 'analysis' ],
    [ 'D-68445', 'foundation/project', 'project' ],
#    [ 'D-nnnn6', 'foundation/time', 'time' ],
    [ 'D-nnnn7', 'foundation/behavior', 'behavior' ],
#    [ 'D-68667', 'math', 'math' ],
   [ 'D-nnnn5', 'discipline/state-analysis', 'state-analysis', '--omit-class-usage' ],
#    [ 'D-nnnn6', 'application/mgss-service', 'mgss-service' ],
#    [ 'D-nnn21', 'discipline/state-analysis-functional-design', 'state-analysis-functional-design' ],
#    [ 'D-nnn28', 'discipline/electrical', 'electrical' ],
    [ 'D-nnn29', 'discipline/vandv', 'vandv' ],
#    [ 'D-nnn30', 'discipline/fault-management', 'fault-management' ],
#    [ 'D-nnn32', 'inactive/architecture-framework', 'architecture-framework' ],
    [ 'D-nnn33', 'application/mars-2020', 'mars-2020' ],
    [ 'D-nnn34', 'discipline/risk', 'risk' ],
    [ 'D-nnn35', 'discipline/mechanical', 'mechanical' ],
  ].map { |d| o = OpenStruct.new; o.docid, o.path, o.name, o.options = *d; o }

  SUMMARY_DOCUMENTS = [
    ['D-nnn13', 'summary', 'summary'],
  ].map { |d| o = OpenStruct.new; o.docid, o.path, o.name, o.options = *d; o }

  PDF_STATUS = [
   # status  options
   ['draft', 'draft,comments'],
   ['final', 'none']
  ].map { |d| o = OpenStruct.new; o.status, o.options = *d; o }

  HTML_STATUS = [
   # status  userlevel   draftmode
   ['draft', 'comments', 'yes'],
   ['final', 'nochange', 'no']
  ].map { |d| o = OpenStruct.new; o.status, o.userlevel, o.draftmode = *d; o }

  TESTS = 'tests/validate.xml'
%>

SESAME_HOST ?= localhost
SESAME_PORT ?= 8080
SESAME_REPO ?= imce-ontologies-dev
SESAME_URI_PATH ?= openrdf-sesame

AFS_USER ?= sjenkins
AFS_PASSWORD ?= $$HOME/.password
CLEAN := artifacts tests
DBLATEX ?= $(DOCBOOK2LATEX)
DBLATEX_CMD ?= $(JRUBY) $(DBLATEX)
DBLATEX_OPTS ?= -s div31-specdoc -o 11pt,dvips
DOCBOOK2LATEX ?= docbook2latex
DOCBOOK_DBCENT_ID ?= -//OASIS//ENTITIES DocBook Character Entities V4.5//EN
DOCBOOK_DTD ?= /usr/share/xml/docbook/schema/dtd/5.0/docbook.dtd
DOCBOOK_PROFILE_XSL ?= /usr/share/xml/docbook/stylesheet/docbook-xsl-ns/profiling/profile.xsl
DOCBOOK_XHTML_XSL ?= /usr/share/xml/docbook/stylesheet/docbook-xsl-ns/xhtml/docbook.xsl
DVI2BITMAP ?= dvi2bitmap
DVI2BITMAP_OPTS ?= -verbose=silent
DVIPS ?= dvips
DVIPS_OPTS ?= -Ppdf -q
ERB ?= erb
IMPORTS_GRAPH_FILE ?= $(realpath ../ontologies/artifacts/imports-graph.yaml)
INSTALL_DIR ?= /afs/jpl.nasa.gov/group/imce/www/documents
JRUBY ?= jruby
JRUBY_CMD ?= $(JRUBY) --headless
LATEX ?= latex
LATEX_OPTS ?= -halt-on-error -interaction=nonstopmode
LOG4J_CONFIG_FILE ?= file://$(realpath log4j.properties)
MAKEINDEX ?= makeindex
MAKEINDEX_OPTS ?= -q
MAKE_MAKEFILE ?= ../tools/make-makefile
ONT_DOCBOOK ?= CLASSPATH="$(dir $(LOG4J_CONFIG_FILE))" $(JRUBY_CMD) "$(realpath ../tools/ontology-docbook-jena)"
ONT_DOCBOOK_OPTS ?= --omit-summary --host $(JENA_HOST) --port $(JENA_PORT) --dataset $(JENA_DATASET) \
					--dbcent '$(DOCBOOK_DBCENT_ID)'
ONT_SUMMARY ?= CLASSPATH="$(dir $(LOG4J_CONFIG_FILE))" $(JRUBY_CMD) "$(realpath ../tools/ontology-summary-jena)"
ONT_SUMMARY_OPTS ?= --host $(JENA_HOST) --port $(JENA_PORT) --dataset $(JENA_DATASET) \
					--dbcent '$(DOCBOOK_DBCENT_ID)'
RUBYLIB ?= 					
DIV31_DOCBOOK_XSL ?= ./div31-docbook.xsl
PS2PDF ?= ps2pdf
PS2PDF_OPTS ?= -q -dAutoRotatePages=/None
SGML_CATALOG_FILES ?= /etc/xml/catalog
TEXINPUTS ?= .:..:../..:../../..:
VALIDATE ?= $(JRUBY_CMD) ../tools/validate-docbook
VALIDATE_OPTS ?= --xmllint-opts '--catalogs --dtdvalid "file://$(DOCBOOK_DTD)" --noout'
XSLTPROC ?= xsltproc
XSLTPROC_OPTS ?= --catalogs
XSLDIR ?= /usr/share/xml/docbook/stylesheet/nwalsh

#
# Targets and Rules
#

comma := ,

tmpfile = $(dir $1).$(notdir $1)

<%
  class Rule
    def initialize(target = nil)
      @target = target
      @prereqs = []
      @cmds = []
    end
    attr_accessor :prereqs, :cmds, :phony
    def to_s
      (@phony ? ".PHONY: #{@target}\n" : "") +
      "#{@target}: #{@prereqs.join(' ')}\n" +
	@cmds.map { |c| "\t#{c}\n" }.join + "\n"
    end
  end

  DOCUMENTS = ONTOLOGY_DOCUMENTS + SUMMARY_DOCUMENTS

  DOCUMENTS.map do |doc|
    doc.dir = "artifacts/#{doc.path}"
    iri_root = "#{doc.path}/#{doc.name}"
    doc.iri = iri_root.iri
    doc.embedding_iri = (iri_root + '-embedding').iri
    doc.root = "#{doc.dir}/#{doc.name}"
    doc.texinputs = File.dirname(doc.root).split('/').inject([]) { |m, o| m << '..' }.join('/') + ':.:'
    doc.xml = "#{doc.root}.xml"
  end
  DOCBOOK_XML = DOCUMENTS.map { |doc| doc.xml }

  PDF_TARGETS = DOCUMENTS.inject([]) do |list, doc|
    doc.tex = "#{doc.root}.tex"
    list += PDF_STATUS.map { |s| "#{doc.root}-#{s.status}.pdf" }
  end.join(' ')

  HTML_TARGETS = DOCUMENTS.inject([]) do |list, doc|
    list += HTML_STATUS.map { |s| "#{doc.root}-#{s.status}.html" }
  end.join(' ')
  
  ONTOLOGY_IRIS = ONTOLOGY_DOCUMENTS.inject([]) do |list, doc|
    list << "#{doc.path}/#{doc.name}".iri
  end.join(' ')
%>

.PHONY: all
all:	documents

.PHONY: artifacts
artifacts:	documents

.PHONY:	documents
documents: html pdf

.PHONY: html
html:	<%= HTML_TARGETS %>

.PHONY: pdf
pdf:	<%= PDF_TARGETS %>

.PHONY: docbook
docbook:  <%= DOCBOOK_XML.join(' ') %>

.PHONY: validate

validate: <%= TESTS %>

define do_validate
  @echo validate docbook
  @mkdir -p $(dir $@)
  @$(VALIDATE) $(VALIDATE_OPTS) $^ > $@
endef

<%=
  rule = Rule.new(TESTS)
  rule.prereqs = DOCBOOK_XML
  rule.cmds << "$(call do_validate)"
  rule
%>

.PHONY: install
install: pdf html
	@echo install
	@tokens | grep -q Expires || klog -pipe $(AFS_USER) < $(AFS_PASSWORD)
	@cp <%= PDF_TARGETS %> <%= HTML_TARGETS %> *.png *.svg $(INSTALL_DIR)

.PHONY: clean
clean:; rm -rf $(CLEAN)

Makefile: Makefile.erb
	@echo $< '->' $@
	@$(JRUBY_CMD) $(MAKE_MAKEFILE) $< > .$@ && mv .$@ $@

# Generate DocBook for each ontology.

define do_docbook
  @echo $(SESAME_REPO):$(3) '->' $@
  @mkdir -p $(dir $@)
  @cd $(dir $@) && $(ONT_DOCBOOK) $(ONT_DOCBOOK_OPTS) --number $(1) $(2) $(3) $(4) > $(call tmpfile,$(notdir $@)) && mv $(call tmpfile,$(notdir $@)) $(notdir $@)
endef

<%=
  ONTOLOGY_DOCUMENTS.map do |doc|
    rule = Rule.new(doc.xml)
    rule.cmds << "$(call do_docbook,#{doc.docid},#{doc.options},#{doc.iri},#{doc.embedding_iri})"
    rule
  end.join
%>

# Generate DocBook summary.

define do_summary
  @echo $(SESAME_REPO) '->' $@
  @mkdir -p $(dir $@)
  @cd $(dir $@) && $(ONT_SUMMARY) $(ONT_SUMMARY_OPTS) --number $(1) $(2) > $(call tmpfile,$(notdir $@)) && mv $(call tmpfile,$(notdir $@)) $(notdir $@)
endef

<%=
  SUMMARY_DOCUMENTS.map do |doc|
    rule = Rule.new(doc.xml)
    rule.cmds << "$(call do_summary,#{doc.docid},#{ONTOLOGY_IRIS})"
    rule
  end.join
%>

# Generate HTML for each status.

define do_html
  @echo $< '->' $@
  @$(XSLTPROC) $(XSLTPROC_OPTS) --stringparam 'profile.userlevel' $(2) \
    '$(DOCBOOK_PROFILE_XSL)' $< | \
  $(XSLTPROC) $(XSLTPROC_OPTS) --stringparam 'section.autolabel' 1 \
    --stringparam 'draft.mode' $(3) \
    --stringparam 'tex.math.in.alt' latex \
    --stringparam 'passivetex.extensions' 1 \
    --stringparam 'tex.math.file' $(1)-equations.tex \
    '$(DOCBOOK_XHTML_XSL)' - > $(call tmpfile,$@) && mv $(call tmpfile,$@) $@
  @if [ -f $(1)-equations.tex ]; \
  then \
    cd $(dir $@) && $(LATEX) $(LATEX_OPTS) $(notdir $1)-equations.tex > /dev/null 2>&1 ; \
    if [ -f $(1)-equations.dvi ]; \
    then \
      cd $(dir $@) && $(DVI2BITMAP) $(DVI2BITMAP_OPTS) $(notdir $(1))-equations; \
    else \
      true; \
    fi \
  else \
    true; \
  fi
endef

<%=
  DOCUMENTS.map do |doc|
    HTML_STATUS.map do |status|
      base = "#{doc.root}-#{status.status}"
      rule = Rule.new(base + '.html')
      rule.prereqs << doc.xml
      rule.cmds << "$(call do_html,#{base},#{status.userlevel},#{status.draftmode})"
      rule
    end.join
  end.join
%>

# Generate DVI for each status.

define do_latex
  @echo latex $<
  @(cd $(dir $@) && TEXINPUTS="$(1)" $(LATEX) $(LATEX_OPTS) --jobname $(basename $(notdir $@)) \
  	'\newcommand{\UseOption}{$(2)}\input{$(notdir $<)}') > /dev/null 2>&1 || \
  		(cat $(dir $@)/$(basename $(notdir $@)).log; rm -f $@)
endef

define do_makeindex
  @echo makeindex $@
  @$(MAKEINDEX) $(MAKEINDEX_OPTS) $(@:dvi=idx)
endef

define do_dvi
    @> $(@:dvi=ind)
    @> $(@:dvi=gls)
    @$(call do_latex,$(1),$(2))
    @$(call do_makeindex)
    @$(call do_latex,$(1),$(2))
    @$(call do_latex,$(1),$(2))
endef

<%=
  DOCUMENTS.map do |doc|
    PDF_STATUS.map do |status|
      base = "#{doc.root}-#{status.status}"
      rule = Rule.new(base + '.dvi')
      rule.prereqs << doc.tex
      options = status.options.gsub(/,/, '$(comma)')
      rule.cmds << "$(call do_dvi,#{doc.texinputs},#{options})"
      rule
    end.join
  end.join
%>

#
# Rules
#

# Convert DocBook xml to tex.

%.tex : %.xml
	@echo $< '->' $@
	@cd $(dir $@) && $(DBLATEX_CMD) $(DBLATEX_OPTS) $(notdir $<) > $(call tmpfile,$(notdir $@)) && mv $(call tmpfile,$(notdir $@)) $(notdir $@)

# Convert dvi to ps.

%.ps : %.dvi
	@echo $< '->' $@
	@cd $(dir $@) && TEXINPUTS=$(TEXINPUTS) $(DVIPS) $(DVIPS_OPTS) -o $(call tmpfile,$(notdir $@)) $(notdir $<) && mv $(call tmpfile,$(notdir $@)) $(notdir $@) > /dev/null #2>&1

# Convert ps to pdf.

%.pdf : %.ps
	@echo $< '->' $@
	@$(PS2PDF) $(PS2PDF_OPTS) $< $(call tmpfile,$@) && mv $(call tmpfile,$@) $@
