#!/usr/bin/env ruby

#--
#
# Copyright 2016 California Institute of Technology ("Caltech").
# U.S. Government sponsorship acknowledged.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#++

# bundle-axiom-census loads an ontology specified by an IRI on the command line using the OWL API
# (and its imported ontologies) and produces a census of OWL axiom types and expression types on
# standard output.

require 'set'
require 'yaml'
require 'OWLAPIApplication'

APPLICATION_NAME = 'bundle-axiom-census'

class BundleAxiomCensus < OWLAPIApplication
  
  def run
    
    super
        
    # Get bundle IRI.
    
    if ARGV.length == 1
      bundle_iri = ARGV.shift
      log(INFO, "bundle IRI #{bundle_iri}")
    else
      log(FATAL, 'no bundle IRI specified')
      return 1
    end
    
    # Axiom and class expression storage.
    
    axioms = Hash.new { |h, k| h[k] = 0 }
    expressions = Hash.new { |h, k| h[k] = 0 }
      
    # Create ontology manager.
    
    log(INFO, 'create ontology manager')
    manager = OWLManager.create_owl_ontology_manager
    log(DEBUG, 'add location mappers')
    location_mappers.each do |mapper|
      manager.add_iri_mapper(mapper)
    end
   
    # Load bundle.
        
    log(INFO, "load bundle #{bundle_iri}")
    manager.loadOntology(IRI.create(bundle_iri))
      
    # Iterate over loaded ontologies and collect axioms and expression.
    
    manager.getOntologies.each do |ontology|
      ontology_iri = ontology.getOntologyID.getOntologyIRI
      log(DEBUG, "process #{ontology_iri}")
      ontology.getLogicalAxioms.each do |axiom|
        axiom_type = axiom.getAxiomType.getName 
        axioms[axiom_type] += 1
        axiom.getNestedClassExpressions.each do |expression|
          expression_type = expression.getClassExpressionType.getName
          expressions[expression_type] += 1
        end
      end
    end
    
    # Print results.
    
    puts "axioms"
    axioms.sort_by { |k, v| v }.reverse.each do |t, c|
      printf("%6d %s\n", c, t)
    end
        
    puts "expressions"
    expressions.sort_by { |k, v| v }.reverse.each do |t, c|
      printf("%6d %s\n", c, t)
    end
        
    # Exit.
    
    return 0
          
  end
end

exit(BundleAxiomCensus.new(APPLICATION_NAME).start)
