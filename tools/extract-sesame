#!/usr/bin/env ruby

#--
#
#    $HeadURL$
#
#    $LastChangedRevision$
#    $LastChangedDate$
#
#    $LastChangedBy$
#
#    Copyright (c) 2008-2014 California Institute of Technology.
#    All rights reserved.
#
#++

require 'getoptlong'
require 'logger'
require 'yaml'

require 'jpl/rdf/sesame'

# Define constants.

# Process arguments.

def usage
  warn 'extract-sesame --host host --port port --path path --repo repo --uri uri [ imports-graph ]'
end

log_level = Logger::FATAL
uris = []
host = port = path = repo = nil

GetoptLong.new(
[ '--help',    '-h',       GetoptLong::NO_ARGUMENT ],
[ '--debug',   '-d',       GetoptLong::NO_ARGUMENT ],
[ '--info',    '-i',       GetoptLong::NO_ARGUMENT ],
[ '--warn',    '-w',       GetoptLong::NO_ARGUMENT ],
[ '--clear',   '-c',       GetoptLong::NO_ARGUMENT ],
[ '--repo',    '-r',       GetoptLong::REQUIRED_ARGUMENT ],
[ '--host',                GetoptLong::REQUIRED_ARGUMENT ],
[ '--port',                GetoptLong::REQUIRED_ARGUMENT ],
[ '--path',                GetoptLong::REQUIRED_ARGUMENT ],
[ '--uri',                 GetoptLong::REQUIRED_ARGUMENT ]
).each do |opt, arg|
  case opt
  when "--help"
    usage
    exit 0
  when "--debug"
    log_level = Logger::DEBUG
  when "--info"
    log_level = Logger::INFO
  when "--warn"
    log_level = Logger::WARN
  when "--clear"
    clear = true
  when "--host"
    host = arg
  when "--port"
    port = arg
  when "--path"
    path = arg
  when "--repo"
    repo = arg
  when "--uri"
    uris << arg.to_s
  else
    warn "unknown option: #{opt}"
    usage
    exit 1
  end
end

unless host && port && path && repo && !uris.empty?
  usage
  exit 1
end

# Open log.

log = Logger.new(STDERR)
log.datetime_format = '%Y-%m-%d %H:%M:%S '
log.level = log_level

# Connect to Sesame server.

log.info('begin session')
session = RDF::Sesame::Session.new(host, port, path, log)
raise 'no session' unless session
log.info('create model')
model = session.model(repo)
raise 'no model' unless model

# Load imports graph.

imports_graph = YAML.load(ARGF)['closure']
log.debug("imports graph #{imports_graph.inspect}")

# Construct contexts.

contexts = uris.inject([]) do |memo, uri|
  memo << RDF::Uri.new(uri).to_uriref
  memo += imports_graph[uri].map { |u| RDF::Uri.new(u).to_uriref }
  memo
end
log.debug("contexts: #{contexts.inspect}")

# Extract assertions.

log.info('extract assertions')
assertions = model.export({'context' => contexts})
log.info("assertions: #{assertions.length} bytes}")

# Write output.

log.info('write output')
puts assertions

# End session.

log.info('end session')
session.finish
