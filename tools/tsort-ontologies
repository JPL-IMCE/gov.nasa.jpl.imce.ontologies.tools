#!/usr/bin/env ruby

#--
#
#    $HeadURL$
#
#    $LastChangedRevision$
#    $LastChangedDate$
#
#    $LastChangedBy$
#
#    Copyright (c) 2008-2014 California Institute of Technology.
#    All rights reserved.
#
#++

require 'getoptlong'
require 'logger'
require 'time'
require 'tsort'

require 'jpl/rdf/sesame'

#  Define utility methods.

class String
  def context(append = '')
    RDF::Uri.new(self + append).to_uriref
  end
end

#  Define modules.

module TSortMethods
  include TSort
  def tsort_each_node(&block)
    each_key(&block)
  end
  def tsort_each_child(node, &block)
    begin
      fetch(node).imports.each(&block)
    rescue IndexError
    end
  end
end

# Define variables.

ontologies = {}

# Process arguments.

def usage
  warn 'tsort-ontologies --host host --port port --path path --repo repo'
end

log_level = Logger::FATAL
host = port = path = repo = nil

GetoptLong.new(
[ '--help',     '-h',       GetoptLong::NO_ARGUMENT ],
[ '--debug',    '-d',       GetoptLong::NO_ARGUMENT ],
[ '--info',     '-i',       GetoptLong::NO_ARGUMENT ],
[ '--warn',     '-w',       GetoptLong::NO_ARGUMENT ],
[ '--repo',                 GetoptLong::REQUIRED_ARGUMENT ],
[ '--host',                 GetoptLong::REQUIRED_ARGUMENT ],
[ '--port',                 GetoptLong::REQUIRED_ARGUMENT ],
[ '--path',                 GetoptLong::REQUIRED_ARGUMENT ]
).each do |opt, arg|
case opt
when "--help"
  usage
  exit 0
when "--debug"
  log_level = Logger::DEBUG
when "--info"
  log_level = Logger::INFO
when "--warn"
  log_level = Logger::WARN
when "--host"
  host = arg
when "--port"
  port = arg
when "--path"
  path = arg
when "--repo"
  repo = arg
else
  usage
  exit 1
end
end

unless host && port && path && repo
  usage
  exit 1
end

# Open log.

log = Logger.new(STDERR)
log.datetime_format = '%Y-%m-%d %H:%M:%S '
log.level = log_level

# Connect to Sesame server.

log.info('begin session')
session = RDF::Sesame::Session.new(host, port, path, log)
raise 'no session' unless session
log.info('create in model')
model = session.model(repo)
raise 'no model' unless model

# Find namespaces.

prefix = nil
log.info('find namespaces')
namespace_by_prefix = {}
nsm = {}
model.namespaces.each do |defn|
  prf = defn.prefix.to_s
  ns = defn.namespace.to_s
  namespace_by_prefix[prf] = ns
  nsm[prf] = RDF::NamespaceMap.new(ns)
  namespace_by_prefix[prf] = RDF::NamespaceMap.new(ns)
  log.debug("namespace_by_prefix[#{prf}] = #{ns}")
end
RDF::Uri.ns_by_prf = namespace_by_prefix
log.debug("default namespace prefix #{prefix}")

# Construct prefix declarations.

PREFIX_DECLS = namespace_by_prefix.map do |p, n|
  "prefix #{p}:#{n[''].to_uriref}"
end .join("\n")
log.debug("prefix declarations: #{PREFIX_DECLS}")

# Find ontologies and imports.

ontology_query = %Q{
  #{PREFIX_DECLS}
  select distinct ?ontology ?import
  where {
    ?ontology rdf:type owl:Ontology .
    optional { ?ontology owl:imports ?import . }
  }
}
log.debug("ontology query: #{ontology_query}")
model.query({'query' => ontology_query, 'infer' => 'false'}) do |resp|
  uri = resp.ontology
  unless ontologies[uri]
    resp.uri = uri
    resp.imports = Set.new
    ontologies[uri] = resp
    log.debug("ontology: #{uri}")
  end
  if import = resp.import
    ontologies[uri].imports << import
    log.debug("#{uri} imports #{import}")
  end
end

# Find ontologies, sort and print.

ontologies.extend(TSortMethods)
ontologies = ontologies.tsort.each { |o| puts o }

#  End session.

log.info('end session')
session.finish

# End.

log.info('done')
