#!/usr/bin/env ruby

#--
#
#    $HeadURL$
#
#    $LastChangedRevision$
#    $LastChangedDate$
#
#    $LastChangedBy$
#
#    Copyright (c) 2008-2014 California Institute of Technology.
#    All rights reserved.
#
#++

require 'getoptlong'
require 'logger'
require 'graphviz'
require 'set'
require 'yaml'

require 'OntologyBundles'

include OntologyBundles

# Define constants.

BASENAME = 'graph-dependencies'
DOT = 'dot'
FORMATS = %w{ svg }

# Define classes.

class Node
  
  def initialize(label)
    @label = label
    @name = 'n' + label.hash.to_s.sub(/-/, '_')
    @shape = nil
    @color = nil
  end
  
  attr_reader :label, :name, :shape, :color
  
end

class Ontology < Node
  
  def initialize(uri)
    super
    @shape = 'box'
    @color = '1'
  end
  
end

class Bundle < Node

  def initialize(uri)
    super
    @shape = 'house'
    @color = '2'
  end
  
end

class Subgraph
  
  def initialize(label)
    @label = label
    @name = 'g' + label.hash.to_s.sub(/-/, '_')
    @color = nil
  end
  
  attr_reader :label, :name, :color
  
end

class Group < Subgraph
  
  def initialize(uri)
    super
    @color = '3'
  end
  
end

class Edge
  
  def initialize(from, to)
    @from = from
    @to = to
    @label = nil
    @style = nil
    @color = nil
  end
  
  attr_reader :from, :to, :label, :style, :color
  
  def eql?(other)
    self.class == other.class && @from == other.from && @to == other.to
  end
  
  def hash
    [self.class, @from, @to].hash
  end
end

class Imports < Edge
  
  def initialize(from, to)
    super
    @label = 'imports'
    @style = 'solid'
    @color = '5'
  end
  
end
  
class Bundles < Edge
  
  def initialize(from, to)
    super
    @label = 'bundles'
    @style = 'dashed'
    @color = '4'
  end
  
end
  
# Define utility functions.

def label_to_name(label)
  URI.encode(label)
end
  
# Define variables.

node_by_label = {}
edges = Set.new

# Process arguments.

def usage
  warn 'graph-dependencies --imports imports --parts parts --groups groups --bundles bundles'
end

log_level = Logger::FATAL
imports = bundles = groups = parts = nil

GetoptLong.new(
[ '--help',    '-h',       GetoptLong::NO_ARGUMENT ],
[ '--debug',   '-d',       GetoptLong::NO_ARGUMENT ],
[ '--info',    '-i',       GetoptLong::NO_ARGUMENT ],
[ '--warn',    '-w',       GetoptLong::NO_ARGUMENT ],
[ '--imports',             GetoptLong::REQUIRED_ARGUMENT ],
[ '--bundles',             GetoptLong::REQUIRED_ARGUMENT ],
[ '--groups',              GetoptLong::REQUIRED_ARGUMENT ],
[ '--parts',               GetoptLong::REQUIRED_ARGUMENT ]
).each do |opt, arg|
case opt
when "--help"
  usage
  exit 0
when "--debug"
  log_level = Logger::DEBUG
when "--info"
  log_level = Logger::INFO
when "--warn"
  log_level = Logger::WARN
when "--imports"
  imports = arg
when "--parts"
  parts = arg
when "--groups"
  groups = arg
when "--bundles"
  bundles = arg
else
  usage
  exit 1
end
end

unless imports && bundles && groups && parts
  usage
  exit 1
end

# Open log.

log = Logger.new(STDERR)
log.datetime_format = '%Y-%m-%d %H:%M:%S '
log.level = log_level

# Load ontology parts data.

log.info('load ontology parts data')
part_by_iri = Marshal.load(File.open(parts, 'rb'))
log.debug("ontology parts #{part_by_iri.inspect}")

# Load ontology groups data.

log.info('load ontology groups data')
group_by_iri = Marshal.load(File.open(groups, 'rb'))
log.debug("ontology groups #{group_by_iri.inspect}")

# Load ontology bundles data.

log.info('load ontology bundles data')
bundle_by_name = Marshal.load(File.open(bundles, 'rb'))
log.debug("ontology bundles #{bundle_by_name.inspect}")

# Load imports graph data.

log.info('load imports graph')
imports_graph = YAML.load(File.open(imports))
imports_by_ontology = imports_graph['imports']
log.debug("imports by ontology #{imports_by_ontology.inspect}")
bundled_by_bundle = imports_graph['bundles']
log.debug("bundled by bundle #{bundled_by_bundle.inspect}")

# Draw graph.

log.info('construct graph')

# Create graph object.

options = { :compound => 'true' }
if p = ENV['GRAPHVIZ_PATH']
  options.merge!({ :path => p })
end
g = GraphViz.new('G', options)
g['rankdir'] = 'BT'
g['overlap'] = 'scale'
#g['sep'] = "0.4, 0.2"
g['colorscheme'] = 'dark25'
g.node['shape'] = 'record'
g.node['fontname'] = 'Arial'
g.node['fontsize'] = '10.0'
g.node['colorscheme'] = 'dark25'
g.node['height'] = '0.02'
g.node['width'] = '0.02'
g.edge['fontname'] = 'Arial'
g.edge['fontsize'] = '8.0'
g.edge['colorscheme'] = 'dark25'

  
# Add graphs for bundles, bundled groups, grouped parts.
  
bundle_by_name.each do |bundle_label, bundle|
  log.debug("add bundle #{bundle_label}")
  bundle_graph = g.add_graph(label_to_name(bundle_label), { :label => bundle_label })
  bundle.groups.each do |group|
    log.debug("add group #{group.iri}")
    group_graph = bundle_graph.add_graph(label_to_name(group.iri), { :label => group.iri })
    group.parts.each do |part|
      log.debug("add part #{part.iri}")
      group_graph.add_nodes(label_to_name(part.iri), { :shape => 'none', :label => part.iri })
        imports_by_ontology[part.iri.to_s].each do |import|
      end
    end
  end
end

# Add imports relationships.

#imports_by_ontology.each do |ontology_iri, imports|
#  imports.each do |import_iri|
#    log.debug("add imports #{ontology_iri} -> #{import_iri}")
#    g.add_edges(label_to_name(ontology_iri), label_to_name(import_iri))
#  end
#end

# Write dot input file.

log.info('write dot input file')
input = BASENAME + '.dot'
File.open(input, 'w') do |f|
  f.write(g.to_s)
end

# Write output formats.

FORMATS.each do |format|
  log.info("write #{format} output file")
  system("#{DOT} -T#{format} -o#{BASENAME}.#{format} #{input}")
end

# End session.

log.info('end')
