#!/usr/bin/env ruby

#--
#
#    $HeadURL$
#
#    $LastChangedRevision$
#    $LastChangedDate$
#
#    $LastChangedBy$
#
#    Copyright (c) 2008-2014 California Institute of Technology.
#    All rights reserved.
#
#++

require 'rexml/document'
require 'SesameApplication'
require 'Audit'

APPLICATION_NAME = 'run-audits'
GROUP_TYPES = %w{imce omg}

class AuditApplication < SesameApplication
  
  def run
    
    # Extend standard options for audit files, directories, and trees.
    
    options.audit_files = []
    option_parser.on('--audit-file FILE', 'audit spec file') do |v|
      options.audit_files << v
    end
    
    options.audit_dirs = []
    option_parser.on('--audit-dir DIRECTORY', 'audit specs directory') do |v|
      options.audit_dirs << v
    end
    
    options.audit_trees = []
    option_parser.on('--audit-tree TREE', 'audit specs tree') do |v|
      options.audit_trees << v
    end
    
    # Audit options.
    
    options.audit_options = OpenStruct.new
    option_parser.on('--audit-option NAME=VALUE', 'audit option') do |v|
      name, value = v.split(/=/)
      method = "#{name}=".to_sym
      options.audit_options.send(method, value)
    end
      
    super
    
    if argv.empty?
      log(FATAL, 'no named ontologies')
      return 1
    end
    
    # Pass information through in options.
    
    options.application = self
    options.binding = binding
    options.logger = @log
    
    # Collect audit specifications.
    
    battery = OntologyAudit::Battery.new(options)
    
    options.audit_files.each { |f| battery.add_audit_file(f) }
    options.audit_dirs.each { |d| battery.add_audit_dir(d) }
    options.audit_trees.each { |t| battery.add_audit_tree(t) }
    
    # Run audits.
    
    result = battery.run(@model)
    
    # Write output.
    
    REXML::Formatters::Pretty.new.write(result, STDOUT)
    
    # Exit.
        
    return 0
    
  end
  
end

exit(AuditApplication.new(APPLICATION_NAME).start)