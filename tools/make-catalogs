#!/usr/bin/env ruby

#--
#
#    $HeadURL$
#
#    $LastChangedRevision$
#    $LastChangedDate$
#
#    $LastChangedBy$
#
#    Copyright (c) 2008-2014 California Institute of Technology.
#    All rights reserved.
#
#++

require 'getoptlong'
require 'logger'
require 'rexml/document'

# Define constants.

CATALOG = 'catalog-v001.xml'

OWL_PAT = 'rdf:RDF/owl:Ontology'
RDF_PAT = "rdf:RDF/rdf:Description/rdf:type[@rdf:resource='http://www.w3.org/2002/07/owl#Ontology']"

# Define variables.

catalogs = Hash.new { |h, k| h[k] = {} }

def usage
  warn 'make-catalogs [ dir, ... ]'
end

# Define utility functions.

class String
  def rel_path_to(to)
    from = split(/\//)
    to = to.split(/\//)
    while from.first == to.first
      from.shift
      to.shift
    end
    lead = '../' * from.length
    lead + to.join('/')
  end
end

# Process options.

log_level = Logger::FATAL

GetoptLong.new(
[ '--help',     '-h',       GetoptLong::NO_ARGUMENT ],
[ '--debug',    '-d',       GetoptLong::NO_ARGUMENT ],
[ '--info',     '-i',       GetoptLong::NO_ARGUMENT ],
[ '--warn',     '-w',       GetoptLong::NO_ARGUMENT ]
).each do |opt, arg|
case opt
when "--help"
  usage
  exit 0
when "--debug"
  log_level = Logger::DEBUG
when "--info"
  log_level = Logger::INFO
when "--warn"
  log_level = Logger::WARN
else
  usage
  exit 1
end
end

# Open log.

log = Logger.new(STDERR)
log.datetime_format = '%Y-%m-%d %H:%M:%S '
log.level = log_level

log.info('begin make-catalog')

# Set default directory.

ARGV << '.' if ARGV.empty?

# Iterate over directories and construct embeddings.

log.info('iterate over directories and construct embeddings')
ARGV.each do |dirname|
  log.debug("directory #{dirname}")
  dir = Dir.new(dirname)
  dir.each do |path|
    uri = "#{dirname}/#{path}"
    if uri =~ /\.owl\z/
      log.debug("file #{path}")
      begin
	doc = File.open(uri) do |f|
	  REXML::Document.new(f.read)
	end
      rescue
	log.warn("#{path} invalid; skipping")
	next
      end
      if ont = doc.get_elements(OWL_PAT).first
      elsif type = doc.get_elements(RDF_PAT).first
	ont = type.parent
      else
	raise "no ontology for #{path}" unless ont
      end
      name = ont.attributes['rdf:about']
      log.debug("uri #{uri}")
      log.debug("name #{name}")
      catalogs[dirname][uri] = name
    end
  end
end

# Merge embeddings.

log.info('merge embeddings')
map = {}
catalogs.each_value do |m|
  map.merge!(m)
end
log.debug("map #{map.inspect}")

# Write catalogs.

log.info('write catalogs')
catalogs.each_key do |dir|
  cat_file = "#{dir}/#{CATALOG}"
  log.debug("file #{cat_file}")
  d = REXML::Document.new
  d << REXML::XMLDecl.new
  d << c = REXML::Element.new('catalog')
  c.add_attribute('prefer', 'public')
  c.add_attribute('xmlns', 'urn:oasis:names:tc:entity:xmlns:xml:catalog')
  map.keys.sort.each do |uri|
    name = map[uri]
    c << u = REXML::Element.new('uri')
    tstamp = Time.new.strftime('%Y-%m-%dT%H:%M')
    u.add_attribute('id', "generated #{tstamp} by make-catalog")
    u.add_attribute('name', name)
    log.debug("name #{name}")
    rel_uri = dir.rel_path_to(uri)
    u.add_attribute('uri', rel_uri)
    log.debug("uri #{rel_uri}")
  end
  File.open(cat_file, 'w') do |f|
    d.write(f, 2)
  end
end

# End.

log.info('end make-catalog')
