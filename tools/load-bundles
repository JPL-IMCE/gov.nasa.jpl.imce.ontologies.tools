#!/usr/bin/env ruby

#--
#
#    $HeadURL$
#
#    $LastChangedRevision$
#    $LastChangedDate$
#
#    $LastChangedBy$
#
#    Copyright (c) 2008-2014 California Institute of Technology.
#    All rights reserved.
#
#++

require 'getoptlong'
require 'logger'
require 'open-uri'
require 'time'
require 'OntologyBundles'

require 'jpl/rdf/sesame'

# Define constants.

CONTEXT = RDF::Uri.new('http://imce.jpl.nasa.gov').to_uriref

# Define variables.

triples = []
  
# Process arguments.

def usage
  warn 'load-bundles --bundles bundles --groups groups --host host --port port --path path --repo repo'
end

log_level = Logger::FATAL
bundles = groups = host = port = path = repo = nil

GetoptLong.new(
[ '--help',    '-h',       GetoptLong::NO_ARGUMENT ],
[ '--debug',   '-d',       GetoptLong::NO_ARGUMENT ],
[ '--info',    '-i',       GetoptLong::NO_ARGUMENT ],
[ '--warn',    '-w',       GetoptLong::NO_ARGUMENT ],
[ '--repo',    '-r',       GetoptLong::REQUIRED_ARGUMENT ],
[ '--host',                GetoptLong::REQUIRED_ARGUMENT ],
[ '--port',                GetoptLong::REQUIRED_ARGUMENT ],
[ '--path',                GetoptLong::REQUIRED_ARGUMENT ],
[ '--bundles',             GetoptLong::REQUIRED_ARGUMENT ],
[ '--groups',              GetoptLong::REQUIRED_ARGUMENT ]
).each do |opt, arg|
case opt
when "--help"
  usage
  exit 0
when "--debug"
  log_level = Logger::DEBUG
when "--info"
  log_level = Logger::INFO
when "--warn"
  log_level = Logger::WARN
when "--host"
  host = arg
when "--port"
  port = arg
when "--path"
  path = arg
when "--repo"
  repo = arg
when '--bundles'
  bundles = arg
when '--groups'
  groups = arg
else
  usage
  exit 1
end
end

unless bundles && groups && host && port && path && repo
  usage
  exit 1
end

# Open log.

log = Logger.new(STDERR)
log.datetime_format = '%Y-%m-%d %H:%M:%S '
log.level = log_level

# Connect to Sesame server.

log.info('begin session')
session = RDF::Sesame::Session.new(host, port, path, log)
raise 'no session' unless session
log.info('create model')
model = session.model(repo)
raise 'no model' unless model

nsm = {}
namespace_by_prefix = {}
model.namespaces.map do |defn|
  unless (prf = defn.prefix.to_s).empty?
    ns = defn.namespace.to_s
    nsm[prf] = RDF::NamespaceMap.new(ns)
    namespace_by_prefix[prf] = ns
  end
end
RDF::Uri.ns_by_prf = namespace_by_prefix

# Load ontology groups data.

log.info('load ontology groups data')
group_by_iri = Marshal.load(File.open(groups, 'rb'))
log.debug("ontology groups #{group_by_iri.inspect}")

# Load ontology bundles data.

log.info('load ontology bundles data')
bundle_by_name = Marshal.load(File.open(bundles, 'rb'))
log.debug("ontology bundles #{bundle_by_name.inspect}")

# Create bundles axioms.

bundle_by_name.values.each do |bundle|
  bundle_iri = RDF::Uri.new(bundle.iri).to_uriref
  triples << [bundle_iri, nsm['rdf']['type'], nsm['owl']['Ontology']]
  bundle.imported_bundles.each do |import|
    import_iri = RDF::Uri.new(import.iri).to_uriref
    triples << [bundle_iri, nsm['annotation']['importsBundle'], import_iri]
  end
  bundle.groups.each do |group|
    group_iri = RDF::Uri.new(group.iri).to_uriref
    triples << [group_iri, nsm['rdf']['type'], nsm['owl']['Ontology']]
    triples << [bundle_iri, nsm['annotation']['bundlesGroup'], group_iri]
    group.parts.each do |part|
      part_iri = RDF::Uri.new(part.iri).to_uriref
      triples << [part_iri, nsm['rdf']['type'], nsm['owl']['Ontology']]
      triples << [group_iri, nsm['annotation']['groupsOntology'], part_iri]
    end
  end
end

triples.each do |triple|
  log.debug("triple #{triple.inspect}")
end

# Clear context.

model.delete_statements({ :context => CONTEXT })
  
# Load axioms.

model.add_statements(triples.map { |t| RDF::Statement.new(*t) }, { :context => CONTEXT })
  
# End session.

log.info('end session')
session.finish
