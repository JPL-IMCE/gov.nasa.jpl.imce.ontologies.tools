#!/usr/bin/env ruby

#--
#
# Copyright 2016 California Institute of Technology ("Caltech").
# U.S. Government sponsorship acknowledged.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#++

# close-bundle loads an bundle ontology specifed by its IRI (and its imports) and produces on standard output
# the corresponding bundle closure ontology. A bundle closure contains the smallest set of OWLDisjointClassesAxioms
# and OWLDisjointUnionAxioms such that any two classes that do not have an explicit intersection are disjoint. Classes
# with the annotation isAbstract are declared to be the disjoint union of a set of class expressions.

require 'rexml/document'

require 'OWLAPIApplication'
require 'OntologyBundles'

require 'jgrapht-core-0.9.0'

java_import 'uk.ac.manchester.cs.owl.owlapi.OWLDataFactoryImpl'
java_import 'org.coode.xml.XMLWriterPreferences'
java_import 'org.semanticweb.owlapi.model.AddImport'

java_import 'org.jgrapht.experimental.dag.DirectedAcyclicGraph'
java_import 'org.jgrapht.graph.DefaultEdge'
java_import 'org.jgrapht.alg.TransitiveClosure'
java_import 'org.semanticweb.owlapi.model.AxiomType'
java_import 'org.semanticweb.owlapi.model.ClassExpressionType'

APPLICATION_NAME = 'close-bundle'

ANNOTATIONS = %w{ isAbstract importsBundle bundlesGroup groupsOntology }
BACKBONE = '-backbone'
BUNDLE = '-bundle'
BACKBONE_CLASSES = { 'Thing' => %w{ Entity Aspect ReifiedObjectProperty ReifiedStructuredDataProperty StructuredDatatype } }
DESCENDANTS_CACHE = '.descendants'
EMBEDDING = '-embedding'
WARN_SIZE = 10

class CloseBundleApplication < OWLAPIApplication
  
  def run
    
    option_parser.on('--name NAME', 'bundle name (required)') do |v|
      @options.name = v
    end
    option_parser.on('--uri URI', 'bundle uri (required)') do |v|
      @options.uri = v
    end
    @options.namespace = {}
    option_parser.on('--namespace PREFIX=>NAMESPACE', "namespace prefix definition (2 required)") do |v|
      p, n = v.split(/\s*=>\s*/)
      if (p.empty? || n.empty?)
        log(FATAL, "invalid namespace definition '#{v}'")
      end
      @options.namespace[p] = n
    end
    option_parser.on('--embedding', "embedding bundle") do
      @options.embedding = true
    end
    option_parser.on('--backbone-disjoints "LIST"', 'backbone disjoints') do |v|
      @options.backbone_disjoints = v.split
    end
    option_parser.on('--backbone-prefix PREFIX', 'backbone prefix') do |v|
      @options.backbone_prefix = v
    end
    option_parser.on('--export', 'close export bundle') do
      @options.export = true
    end

    super
    
    if @options.name.nil?
      log(FATAL, 'no bundle name')
      return 1
    end
    if @options.uri.nil?
      log(FATAL, 'no bundle uri')
      return 1
    end
    if argv.empty?
      log(FATAL, 'no named ontologies')
      return 1
    end
    unless @options.namespace.keys.length == 2
      log(FATAL, '2 namespace definitions required')
      return 1
    end
    unless @options.backbone_disjoints
      log(FATAL, 'no backbone disjoints specified')
      return 1
    end
    unless @options.backbone_prefix
      log(FATAL, 'no backbone prefix specified')
      return 1
    end
    
    # Axiom storage.
    
    axioms = java.util.HashSet.new
      
    # Create ontology manager.
    
    log(Logger::INFO, 'create ontology manager')
    manager = OWLManager.create_owl_ontology_manager
    log(Logger::INFO, 'add location mappers')
    location_mappers.each do |mapper|
      manager.add_iri_mapper(mapper)
    end
   
    # Load ontologies.

    log(Logger::INFO, 'load ontologies')
    ontologies = ARGV.map do |arg|
      log(DEBUG, "load ontology #{arg}")
      manager.loadOntology(IRI.create(arg))
    end
    format = manager.getOntologyFormat(ontologies.first)
    imports_set = ontologies.inject(java.util.HashSet.new) do |m, o|
      m += manager.getImportsClosure(o)
      m
    end
    
    # Create data factory.

    log(Logger::INFO, 'create data factory')
    factory = OWLDataFactoryImpl.new
    
    # Set XML serialization preferences.

    log(Logger::INFO, 'set XML serialization preferences')
    xml_prefs = XMLWriterPreferences.get_instance
    xml_prefs.set_use_namespace_entities(true)
    
    # Create annotation properties.

    log(Logger::INFO, 'create annotation properties')
    annotations = ANNOTATIONS.inject({}) do |h, ps|
      p_iri = format.getIRI('annotation:' + ps)
      p = factory.getOWLAnnotationProperty(p_iri)
      h[ps] = p
      h
    end
    
    # Create ontology.
    
    log(Logger::INFO, "create ontology for #{@options.uri}")
    ontology = manager.createOntology(IRI.create(@options.uri))
    
    # Add ontology imports.

    log(Logger::INFO, 'add ontology imports')
    argv.each do |import|
      log(DEBUG, "add imports declaration for #{import}")
      decl = factory.getOWLImportsDeclaration(IRI.create(import))
      import = AddImport.new(ontology, decl)
      manager.applyChange(import)
    end
    
    # Add ontology annotations.

    log(Logger::INFO, 'add ontology annotations')
    { 'rdfs:comment' => "created by #{APPLICATION_NAME}", 'owl:versionInfo' => Time.new.to_s }.each do |ps, vs|
      p_iri = format.getIRI(ps)
      p = factory.getOWLAnnotationProperty(p_iri)
      v = factory.getOWLLiteral(vs)
      ann = factory.getOWLAnnotation(p, v)
      change = AddOntologyAnnotation.new(ontology, ann)
      manager.applyChange(change)
    end
    
    # Create disjointness axioms.
    
    unless @options.embedding
      
      # Create subclasses graph.
      
      log(Logger::INFO, 'create subclasses graph')
      subclasses_graph = DirectedAcyclicGraph.new(DefaultEdge)
      abstracts = Set.new
      ontologies.each do |o|
        log(DEBUG, "  #{o.getOntologyID.getOntologyIRI.toString}")
        o.getClassesInSignature(false).each do |klass|
          unless klass.isAnonymous
            klass_iri = klass.asOWLClass.getIRI.toString
            subclasses_graph.addVertex(klass_iri)
            abstract_annotations = klass.getAnnotations(o, annotations['isAbstract'])
            abstracts << klass_iri if abstract_annotations.any? { |a| a.getValue.parseBoolean }
            klass.getSubClasses(imports_set).reject do |sc|
              sc.isAnonymous
            end.map do |sc|
              sc.asOWLClass.getIRI.toString
            end.each do |sub_iri|
              subclasses_graph.addVertex(sub_iri)
              subclasses_graph.addEdge(klass_iri, sub_iri)
            end
          end
        end
      end
      
      # Find top-level classes.
      
      log(Logger::INFO, 'find top-level classes')
      root_nodes = subclasses_graph.vertexSet.inject(Set.new) do |m, node|
        m << node if subclasses_graph.inDegreeOf(node) == 0
        m
      end
  
      # Create descendants graph.

      descendants_graph = nil
      begin
        File.open(DESCENDANTS_CACHE, 'r') { |f| descendants_graph = Marshal.load(f) }
      rescue Errno::ENOENT
        log(Logger::INFO, 'clone subclasses graph')
        descendants_graph = subclasses_graph.clone
        log(Logger::INFO, 'create descendants graph')
        TransitiveClosure::INSTANCE.closeSimpleDirectedGraph(descendants_graph)
        File.open(DESCENDANTS_CACHE, 'w') { |g| Marshal.dump(descendants_graph, g) }
      end
        
      # Create maps.

      log(Logger::INFO, 'create maps')
      subclasses = Hash.new { |h, k| h[k] = Set.new }
      descendants = Hash.new { |h, k| h[k] = Set.new }
      iter = descendants_graph.iterator
      while iter.hasNext
        k = iter.next
        s = subclasses_graph.outgoingEdgesOf(k).map { |e| e.getTarget }
        d = descendants_graph.outgoingEdgesOf(k).map { |e| e.getTarget }
        subclasses[k] = Set.new(s)
        descendants[k] = Set.new(d)
      end
    
      # Form disjoint sets.
      
      if @options.export

        # Create selected disjoints for ranges of functional object properties and domains of inverse
        # functional object properties.

        # Find functional and inverse functional object properties.
        
        functional_ops = Set.new
        inv_functional_ops = Set.new
        ontologies.each do |o|
          functional_ops += o.getAxioms(AxiomType::FUNCTIONAL_OBJECT_PROPERTY).map do |a|
            a.getProperty
          end
          inv_functional_ops += o.getAxioms(AxiomType::INVERSE_FUNCTIONAL_OBJECT_PROPERTY).map do |a|
            a.getProperty
          end
        end
        log(Logger::INFO, "#{functional_ops.length} functional object properties")
        functional_ops.each do |f|
          log(Logger::DEBUG, "functional #{f.getIRI.toString }")
        end
        log(Logger::INFO, "#{inv_functional_ops.length} inverse functional object properties")
        inv_functional_ops.each do |i|
          log(Logger::DEBUG, "inverse functional #{i.getIRI.toString }")
        end

        # Find range restrictions on above object properties.

        functional_rrs = Hash.new { |h, k| h[k] = Set.new }
        inv_functional_rrs = Hash.new { |h, k| h[k] = Set.new }
        restricted_classes = Hash.new { |h, k| h[k] = Set.new }
        ontologies.each do |o|
          o.getAxioms(AxiomType::SUBCLASS_OF).map do |a|
            [ a.getSubClass, a.getSuperClass ]
          end.select do |pair1|
            sub, sup = *pair1
            sup.isAnonymous && sup.isObjectRestriction && 
              [ ClassExpressionType::OBJECT_ALL_VALUES_FROM,
                ClassExpressionType::OBJECT_SOME_VALUES_FROM ].include?(sup.getClassExpressionType)
          end.each do |pair2|
            sub, rr = *pair2
            prop = rr.getProperty()
            log(DEBUG, "range restriction on #{prop.toString}")
            functional_rrs[prop] << rr if functional_ops.include?(prop)
            inv_functional_rrs[prop] << rr if inv_functional_ops.include?(prop)
            restricted_classes[rr] << sub
          end
        end
        log(Logger::INFO, "#{functional_rrs.values.inject(0) { |m, o| m += o.length; m } } functional range restrictions")
        log(Logger::INFO, "#{inv_functional_rrs.values.inject(0) { |m, o| m += o.length; m } } inverse functional range restrictions")

        # Transform range restrictions into maps x->y such that for each x there can be
        # at most one y.

        log(Logger::INFO, 'create range restriction maps')
        rr_map = Hash.new { |h, k| h[k] = Hash.new { |l, m| l[m] = Set.new } }
        functional_rrs.each do |prop, rrl|
          rrl.each do |rr|
            restricted_classes[rr].each do |c|
              rr_map[prop.getIRI.toString][c.getIRI.toString] << rr.getFiller.getIRI.toString
            end
          end
        end
        inv_functional_rrs.each do |prop, rrl|
          rrl.each do |rr|
            rr_map[prop.getIRI.toString][rr.getFiller.getIRI.toString] += restricted_classes[rr].map { |c| c.getIRI.toString }
          end
        end
        l = rr_map.inject(0) do |m, r|
          k, v = *r
          m += v.length
          m
        end
        log(Logger::INFO, "#{l} range restriction map entries")
        rr_map.each do |k1, v1|
          log(Logger::DEBUG, "rr_map[#{k1}] = ")
          v1.each do |k2, v2|
            log(Logger::DEBUG, "  #{k2} => ")
            v2.each do |v3|
              log(Logger::DEBUG, "    #{v3}")
            end
          end
        end

        log(Logger::INFO, 'create disjointness candidate lists')
        dj_cands = rr_map.inject([]) do |m, o|
          prop, h = *o
          x_part = partition_list(h.keys, descendants)
          x_part.each do |xp|
            l = xp.map { |x| rr_map[prop][x].to_a }.flatten
            m << l if l.length > 1
          end
          m
        end
        log(Logger::INFO, "#{dj_cands.length} disjointness candidate lists")
        dj_cands.each do |djc|
          log(Logger::DEBUG, "candidate: #{djc.inspect}")
          log(Logger::DEBUG, "length: #{djc.length}")
        end

        # Create disjointness axioms.

        log(Logger::INFO, 'create disjointness axioms')
        n = 0
        dj_cands.each do |cl|
          minimal_list = remove_descendants(cl, descendants)
          partition = partition_list(minimal_list, descendants)
          expression = class_expression(partition, factory)
          if expression.length > 1
            axioms << factory.getOWLDisjointClassesAxiom(expression)
            n += 1
          end
        end
        log(Logger::INFO, "#{n} disjointness axioms")
        
      else

        # Create minimal disjoints for any pair of classes without an explicit common subclass.
        
        p_iri = format.getIRI('rdfs:comment')
        p = factory.getOWLAnnotationProperty(p_iri)
        subclasses.each do |klass, list|
          log(DEBUG, "class #{klass}")
          v = factory.getOWLLiteral("subclasses of #{format.getPrefixIRI(IRI.create(klass))}")
          ann = factory.getOWLAnnotation(p, v)
          (ah = java.util.HashSet.new) << ann
          unless (minimal_list = remove_descendants(list, descendants)).empty?
            partition = partition_list(minimal_list, descendants)
            log(DEBUG, "partition: #{partition.inspect}")
            expression = class_expression(partition, factory)
            if abstracts.include?(klass)
              c = factory.getOWLClass(IRI.create(klass.to_s))
              axioms << factory.getOWLDisjointUnionAxiom(c, expression, ah)
            elsif expression.length > 1
              axioms << factory.getOWLDisjointClassesAxiom(expression, ah)
            end
          end
        end
        
        # Declare selected backbone classes disjoint.
        
        ontologies.each do |o|
          ontology_iri_s = o.getOntologyID.getOntologyIRI.to_string
          log(DEBUG, "disjoint backbone classes of #{ontology_iri_s}")
          v = factory.getOWLLiteral("disjoint backbone classes of #{ontology_iri_s}")
          ann = factory.getOWLAnnotation(p, v)
          (ah = java.util.HashSet.new) << ann
          backbone_iri_strings = @options.backbone_disjoints.inject([]) do |m, stem|
            m << [ to_backbone(@options.backbone_prefix, ontology_iri_s) + "##{stem}" ]
          end
          exp = class_expression(backbone_iri_strings, factory)
          axioms << factory.getOWLDisjointClassesAxiom(exp, ah)
        end
        
        # Create collecting subclass axioms for backbone classes.
        
        bundle_iri_s = to_backbone(@options.backbone_prefix, ontology.getOntologyID.getOntologyIRI.to_string)
        BACKBONE_CLASSES.each do |top, list|
          bundle_top_iri = IRI.create("#{bundle_iri_s}##{top}")
          bundle_top = factory.getOWLClass(bundle_top_iri)
          t = factory.getOWLLiteral(true)
          ann = factory.getOWLAnnotation(annotations['isAbstract'], t)
          axioms << factory.getOWLAnnotationAssertionAxiom(bundle_top_iri, ann)
          list.each do |c|
            bundle_sub_iri = IRI.create("#{bundle_iri_s}##{c}")
            bundle_sub = factory.getOWLClass(bundle_sub_iri)
            log(DEBUG, "#{bundle_sub_iri.toString} subclass of #{bundle_top_iri.toString}")
            axioms << factory.getOWLSubClassOfAxiom(bundle_sub, bundle_top)
            axioms << factory.getOWLAnnotationAssertionAxiom(bundle_sub_iri, ann)
            ontologies.each do |o|
              ontology_iri_s = to_backbone(@options.backbone_prefix, o.getOntologyID.getOntologyIRI.to_string)
              ontology_sub_iri = IRI.create("#{ontology_iri_s}##{c}")
              ontology_sub = factory.getOWLClass(ontology_sub_iri)
              axioms << factory.getOWLSubClassOfAxiom(ontology_sub, bundle_sub)
              log(DEBUG, "#{ontology_sub_iri.toString} subclass of #{bundle_sub_iri.toString}")
            end
          end
        end
      end
    end
      
    # Add axioms to ontology.

    axioms.each do |axiom|
      log(DEBUG, "add axiom #{axiom}")
      manager.add_axiom(ontology, axiom)
    end
      
    # Construct format specification for RDF/XML.
    
    rdfxml_format = RDFXMLOntologyFormat.new
    
    # Copy prefixes from first bundled ontology.
    
    rdfxml_format.copyPrefixesFrom(format)
    
    # Add prefixes for bundle.
    
    @options.namespace.each do |p, n|
      u = n + '#'
      log(DEBUG, "set prefix #{p} -> #{u}")
      rdfxml_format.setPrefix(p, u)
    end
    
    # Write modified ontology in OWL/XML.
  
    manager.save_ontology(ontology, rdfxml_format, STDOUT.to_outputstream)
    
    # Exit.
    
    return 0
          
  end
  
  # Remove classes from a list that are descendants of
  # other classes.
  
  def remove_descendants(list, descendants)
    list - list.inject(Set.new) do |m, o|
      m += descendants[o]
      m
    end.to_a
  end
  
  # Partition a list of classes into a list of lists, each of which
  # has no common descendants with any of the others.

  def partition_list(list, descendants)
    log(DEBUG, "list: #{list.inspect}")
    desc = Hash.new { |h, k| h[k] = Set.new }
    result = []
    list.each do |cand|
      log(DEBUG, "cand: #{cand}")
      cd = descendants[cand]
      log(DEBUG, "desc[cand] #{cd.inspect}")
      result, match = result.partition { |r| desc[r].intersection(cd).empty? }
      if match.empty?
        
        # No match. Create a set for this class and add it to the result.
        
        log(DEBUG, 'no match')
        result << (nr = [cand])
        desc[nr] = cd
        
      else
        
        # Match. Add this class to an existing set in the result.
        
        log(DEBUG, 'match')
        result << nr = match.inject([cand]) { |m, o| m += o; m }
        desc[nr] = match.inject(Set.new(descendants[cand])) { |m, o| m += desc[o]; m }
          
      end
      log(DEBUG, "result: #{result.inspect}")
      log(DEBUG, "desc: #{desc.inspect}")
    end
    result
  end
  
  # Create an OWL Class or a union of Classes from a list.
  
  def class_expression(disjoint_set, factory)
    result = java.util.HashSet.new
    disjoint_set.each do |union_list|
      case union_list.length
      when 1
        result << factory.getOWLClass(IRI.create(union_list.first.to_s))
      else
        union_hash = union_list.inject(java.util.HashSet.new) do |m, c|
          m << factory.getOWLClass(IRI.create(c.to_s))
          m
        end
        result << factory.getOWLObjectUnionOf(union_hash)
      end
    end
    result
  end
  
  def to_backbone(prefix, iri)
    prefix + iri.sub(/^http:\/\//, '')
  end
  
end

exit(CloseBundleApplication.new(APPLICATION_NAME).start)
