#!/usr/bin/env ruby

#--
#
# Copyright 2016 California Institute of Technology ("Caltech").
# U.S. Government sponsorship acknowledged.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#++

# audit-census reads an audit result (in JUnit format) from a file named on the command line
# or standard input and produces a census (number of cases, number of failures) for each test suite.

require 'Application'
require 'rexml/document'

APPLICATION_NAME = 'audit-census'

class TestSuite
  def initialize(name)
    @suite = name
    @cases = 0
    @failures = 0
  end
  attr_accessor :suite, :cases, :failures
end

class AuditCensusApplication < Application
  
  def run
    
    super
    
    if argv.empty?
      log(FATAL, 'no input file')
      exit 1
    end
     
   testsuites = {}
   total = TestSuite.new('total')

    ARGV.each do |arg|
      io = File.open(arg)
      log(INFO, "parsing #{arg}")
      audit = REXML::Document.new(io)

      top = audit.get_elements('testsuites').first
      unless top
        log(FATAL, 'no testsuites found')
        exit 1
      end

      total_cases = 0
      total_failures = 0

      top.each_element('testsuite') do |testsuite|
        suite = testsuite.attributes['name']
        log(DEBUG, "test suite #{suite}")
        os = testsuites[suite] ||= TestSuite.new(suite)
        cases = testsuite.get_elements('testcase').length
        os.cases += cases
        total.cases += cases
        failures = testsuite.get_elements('testcase/failure').length
        os.failures += failures
        total.failures += failures
        log(DEBUG, os.inspect)
      end
    end
    
    (testsuites.values.sort_by { |e| e.suite } << total).each do |ts|
      puts "%6d/%6d %s" % [ts.failures, ts.cases, ts.suite]
    end
    
    return 0
    
  end
end

exit(AuditCensusApplication.new(APPLICATION_NAME).start)
