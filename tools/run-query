#!/usr/bin/env ruby

#--
#
#    $HeadURL$
#
#    $LastChangedRevision$
#    $LastChangedDate$
#
#    $LastChangedBy$
#
#    Copyright (c) 2008-2014 California Institute of Technology.
#    All rights reserved.
#
#++

require 'getoptlong'
require 'logger'
require 'jpl/rdf/sesame'

# Define variables.

host = 'localhost'
port = '8080'
path = 'openrdf-sesame'
repo = nil
log_level = Logger::FATAL
no_prefixes = false
method = :query_bindings
query_vars = {}

# Process arguments.

def usage
  warn 'run-query --host host --port port --path path --repo repo [ --query-(bindings|statements|boolean) ] [ query ]'
end

GetoptLong.new(
[ '--help',    '-h',       GetoptLong::NO_ARGUMENT ],
[ '--debug',   '-d',       GetoptLong::NO_ARGUMENT ],
[ '--info',    '-i',       GetoptLong::NO_ARGUMENT ],
[ '--warn',    '-w',       GetoptLong::NO_ARGUMENT ],
[ '--no-prefixes',         GetoptLong::NO_ARGUMENT ],
[ '--repo',    '-r',       GetoptLong::REQUIRED_ARGUMENT ],
[ '--host',                GetoptLong::REQUIRED_ARGUMENT ],
[ '--port',                GetoptLong::REQUIRED_ARGUMENT ],
[ '--path',                GetoptLong::REQUIRED_ARGUMENT ],
[ '--query-bindings',      GetoptLong::NO_ARGUMENT ],
[ '--query-statements',    GetoptLong::NO_ARGUMENT ],
[ '--query-boolean',       GetoptLong::NO_ARGUMENT ],
[ '--variable',  '-v',     GetoptLong::REQUIRED_ARGUMENT ]
).each do |opt, arg|
  case opt
  when "--help"
    usage
    exit 0
  when "--debug"
    log_level = Logger::DEBUG
  when "--info"
    log_level = Logger::INFO
  when "--warn"
    log_level = Logger::WARN
  when "--host"
    host = arg
  when "--port"
    port = arg
  when "--path"
    path = arg
  when "--repo"
    repo = arg
  when '--no-prefixes'
    no_prefixes = true
  when '--query-bindings'
    method = :query_bindings
  when '--query-statements'
    method = :query_statements
  when '--query-boolean'
    method = :query_boolean
  when '--variable'
    var, value = *arg.split('=')
    query_vars[var] = value
  else
    warn "unknown option: #{opt}"
    usage
    exit 1
  end
end

unless host && port && path && repo && method
  usage
  exit 1
end

# Open log.

log = Logger.new(STDERR)
log.datetime_format = '%Y-%m-%d %H:%M:%S '
log.level = log_level

# Connect to Sesame server.

log.info('begin session')
session = RDF::Sesame::Session.new(host, port, path, log)
session.timeout = 3600 # 60 minutes
raise 'no session' unless session
log.info('create model')
model = session.model(repo)
raise 'no model' unless model

# Get namespace prefixes and definitions from repository.

log.info('get namespace definitions')
nsm = {}
namespace_by_prefix = {}
model.namespaces.map do |defn|
  prf = defn.prefix.to_s
  ns = defn.namespace.to_s
  nsm[prf] = RDF::NamespaceMap.new(ns)
  namespace_by_prefix[prf] = ns
end
RDF::Uri.ns_by_prf = namespace_by_prefix

# Create namespace definition string.

NS_DEFS = nsm.map do |prf, ns|
  "PREFIX #{prf}:#{nsm[prf][''].to_uriref}"
end.join("\n")

# Concatenate prefixes with input query.

query = no_prefixes ? '' : "#{NS_DEFS}\n"
query << ARGF.read
query_vars.each do |var, value|
  match = Regexp.new(Regexp.quote(var))
  query = query.gsub(match, value)
  log.debug("replace #{match} by #{value}")
end
log.debug("query: #{query}")

# Construct options.

options = {'query' => query, 'infer' => 'false', 'raw' => 'true'}
log.debug("options: #{options.inspect}")
  
# Run query.

log.info('run query')
model.send(method, options) do |r|
  puts r
end

# End session.

log.info('end')
session.finish
