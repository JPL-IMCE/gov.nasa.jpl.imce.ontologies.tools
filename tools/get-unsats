#!/usr/bin/env ruby

#--
#
# Copyright 2016 California Institute of Technology ("Caltech").
# U.S. Government sponsorship acknowledged.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#++

require 'csv'
require 'fileutils'
require 'rexml/document'

require 'owlapi'

require 'Application'

APPLICATION_NAME = 'get-unsats'

class GetUnsats < Application

  java_import 'uk.ac.manchester.cs.owl.owlapi.OWLDataFactoryImpl'

  ALL_OPTS = [:get_props, :get_sups, :get_prop_sources, :get_prop_targets, :get_func_props]

  def clear(symbols)
    symbols.each do |s|
      @options.send((s.to_s + '=').to_sym, false)
    end
  end

  def run
  
    @options.get_props = false
    option_parser.on('--get-props', 'get implicated properties') do
      clear(ALL_OPTS - [:get_props])
      @options.get_props = true
    end
    
    @options.get_sups = false
    option_parser.on('--get-sups', 'get implicated superclasses') do
      clear(ALL_OPTS - [:get_sups])
      @options.get_sups = true
    end

    @options.get_prop_sources = false
    option_parser.on('--get-prop-sources', 'get implicated properties and sources') do
      clear(ALL_OPTS - [:get_prop_sources])
      @options.get_prop_sources = true
    end

    @options.get_prop_targets = false
    option_parser.on('--get-prop-targets', 'get implicated properties and targets') do
      clear(ALL_OPTS - [:get_prop_targets])
      @options.get_prop_targets = true
    end

    @options.get_func_props = false
    option_parser.on('--get-func-props', 'get implicated functional properties') do
      clear(ALL_OPTS - [:get_func_props])
      @options.get_func_props = true
    end
    
    super
    
    # Create ontology manager.
    
    logger.log(Logger::INFO, 'create ontology manager')
    manager = OWLManager.createOWLOntologyManager
    raise "couldn't create owl ontology manager" unless manager

    # Create data factory
    
    logger.log(Logger::INFO, 'create OWL data factory')
    factory = manager.getOWLDataFactory
    
    # Initialize CSV output.
    
    logger.log(Logger::INFO, 'initialize CSV output')
    csv = CSV.new(STDOUT)
    header = %w{ class }
    if @options.get_props || @options.get_func_props
      header << 'prop'
    elsif @options.get_sups
      header << 'sup'
    elsif @options.get_prop_sources
      header += %w{ source prop }
    elsif @options.get_prop_targets
      header += %w{ prop target }
    end
    csv << header
    
    # Process unsatisfiability results.
    
    logger.log(Logger::INFO, 'process unsatisfiability results')
    doc = REXML::Document.new(ARGF)
    top = doc.get_elements('testsuites/testsuite[@name="satisfiability"]').first
    top.each_element('testcase') do |e|
      next unless failure = e.get_elements('failure').first
      name = e.attributes['name']
      logger.log(Logger::DEBUG, "get explanation for #{name}")
      klass = name.split[1].sub(/\A<(.*)>\z/, '\1')
      explanation = failure.texts.join
      data = [klass]
      extra = if @options.get_sups
          get_sups_from_explanation(manager, factory, klass, explanation)
        elsif @options.get_props
          get_props_from_explanation(manager, factory, klass, explanation)
        elsif @options.get_prop_sources
          get_prop_sources_from_explanation(manager, factory, klass, explanation)
        elsif @options.get_prop_targets
          get_prop_targets_from_explanation(manager, factory, klass, explanation)
        elsif @options.get_func_props
          get_func_props_from_explanation(manager, factory, klass, explanation)
        else
          []
        end
      if @options.get_sups || @options.get_props || @options.get_prop_sources || @options.get_prop_targets || @options.get_func_props
        extra.each do |e|
          csv << (data.dup + e)
        end
      else
        csv << data
      end
    end
    
    return 0
    
  end
  
  def get_props_from_explanation(manager, factory, klass, explanation)
        
    # Create ontology model for results.
    
    source = StringDocumentSource.new(explanation)
    model = manager.loadOntologyFromOntologyDocument(source)
    
    # Create class expression for unsatisfiable class.
    
    class_expr = factory.getOWLClass(IRI.create(klass))
    
    # Find implicated properties.
    
    model.getSubClassAxiomsForSubClass(class_expr).map do |a|
      a.getSuperClass
    end.select do |c|
      c.isAnonymous &&
      c.isObjectRestriction
    end.map { |r| [ r.getProperty.getIRI.toString ] }.uniq

  end

  def get_func_props_from_explanation(manager, factory, klass, explanation)
        
    # Create ontology model for results.
    
    source = StringDocumentSource.new(explanation)
    model = manager.loadOntologyFromOntologyDocument(source)
    
    # Create class expression for unsatisfiable class.
    
    class_expr = factory.getOWLClass(IRI.create(klass))
    
    # Find implicated properties.
    
    model.getSubClassAxiomsForSubClass(class_expr).map do |a|
      a.getSuperClass
    end.select do |c|
      c.isAnonymous &&
      c.isObjectRestriction
    end.map do |r|
      r.getProperty
    end.reject do |p|
        model.getFunctionalObjectPropertyAxioms(p).isEmpty
    end.map { |p| [ p.getIRI.toString ] }.uniq

  end
  
  def get_prop_sources_from_explanation(manager, factory, klass, explanation)
    
    # Create ontology model for results.
    
    source = StringDocumentSource.new(explanation)
    model = manager.loadOntologyFromOntologyDocument(source)
    
    # Create class expression for unsatisfiable class.
    
    class_expr = factory.getOWLClass(IRI.create(klass))
    
    # Find implicated properties and sources.
    
    domain_classes = model.getSubClassAxiomsForSubClass(class_expr).map do |a|
      a.getSuperClass
    end.reject do |c|
      c.isAnonymous
    end.uniq
    properties = model.getSubClassAxiomsForSubClass(class_expr).map do |a|
      a.getSuperClass
    end.select do |c|
      c.isAnonymous &&
      c.isObjectRestriction
    end.map do |r|
      r.getProperty
    end.uniq.reject do |p|
      model.getObjectPropertyDomainAxioms(p).isEmpty
    end
    domain_classes.inject([]) do |m, c|
      properties.each do |p|
        m << [c.getIRI.toString, p.getIRI.toString]
      end
      m
    end

  end

  def get_prop_targets_from_explanation(manager, factory, klass, explanation)
    
    # Create ontology model for results.
    
    source = StringDocumentSource.new(explanation)
    model = manager.loadOntologyFromOntologyDocument(source)
    
    # Create class expression for unsatisfiable class.
    
    class_expr = factory.getOWLClass(IRI.create(klass))
    
    # Find implicated properties and targets.
    
    model.getSubClassAxiomsForSubClass(class_expr).map do |a|
      a.getSuperClass
    end.select do |c|
      c.isAnonymous &&
      c.isObjectRestriction
    end.map { |r| [ r.getProperty, r.getFiller ] }.uniq.inject([]) do |m, o|
        model.getSubClassAxiomsForSubClass(o[1]).map do |a|
        a.getSuperClass
      end.reject do |c|
        c.isAnonymous
      end.uniq.each do |x|
        m << [o[0].getIRI.toString, x.getIRI.toString]
      end
      m
    end

  end
  
  def get_sups_from_explanation(manager, factory, klass, explanation)
    
    # Create ontology model for results.
    
    source = StringDocumentSource.new(explanation)
    model = manager.loadOntologyFromOntologyDocument(source)
    
    # Create class expression for unsatisfiable class.
    
    class_expr = factory.getOWLClass(IRI.create(klass))
    
    # Find implicated superclasses.
    
    model.getSubClassAxiomsForSubClass(class_expr).map do |a|
      a.getSuperClass
    end.reject do |c|
      c.isAnonymous
    end.map { |s| [ s.getIRI.toString ] }.uniq

  end
  
end

exit(GetUnsats.new(APPLICATION_NAME).start)
