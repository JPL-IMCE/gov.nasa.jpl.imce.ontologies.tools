#!/usr/bin/env ruby

#--
#
#    $HeadURL$
#
#    $LastChangedRevision$
#    $LastChangedDate$
#
#    $LastChangedBy$
#
#    Copyright (c) 2008-2014 California Institute of Technology.
#    All rights reserved.
#
#++

require 'getoptlong'
require 'logger'
require 'tempfile'
require 'time'
require 'rexml/document'
require 'jpl/rdf/sesame'

# Define constants.

WWW_OMG_ORG = 'www.omg.org'
WWW_OMG_ORG_ES = Regexp.escape(WWW_OMG_ORG)
WWW_OMG_ORG_RE = Regexp.new(WWW_OMG_ORG_ES)
WWW_OMG_ORG_SPARQL_RE = WWW_OMG_ORG_ES.gsub(/\\/, '\\\\\\')

IMCE_JPL_NASA_GOV = 'imce.jpl.nasa.gov'
IMCE_JPL_NASA_GOV_ES = Regexp.escape(IMCE_JPL_NASA_GOV)
IMCE_JPL_NASA_GOV_RE = Regexp.new(IMCE_JPL_NASA_GOV_ES)
IMCE_JPL_NASA_GOV_SPARQL_RE = IMCE_JPL_NASA_GOV_ES.gsub(/\\/, '\\\\\\')

# Define structs.

TestSuite = Struct.new(:name, :query_handler_pairs, :cases)
QueryHandlerPair = Struct.new(:query, :handler)
TestCase = Struct.new(:name, :pass, :text)
MapStruct = Struct.new(:map, :ok, :type)

# Define variables.

imports_by_ontology = Hash.new { |h, k| h[k] = Set.new }
closure_by_ontology = Hash.new { |h, k| h[k] = Set.new }

suites = []
results = {}

# Define utility functions.

class String
  def context(append = '')
    RDF::Uri.new(self + append).to_uriref
  end
end

class Hash
  def close(k, stop = nil)
    self[k].inject(Set.new) do |m, o|
      unless stop && o =~ stop
        m << o
        m += self.close(o, stop)
      end
      m
    end
  end
end

def graph_filter(var, ont_list)
  '(' + ont_list.map { |g| "(#{var} = #{g})" }.join("\n || ") + ')'
end

#  Define modules.

# Process arguments.

def usage
  warn 'ontology-digest --host host --port port --path path --repo repo [ uri, uri, ...'
end

log_level = Logger::FATAL
host = port = path = repo = nil

GetoptLong.new(
[ '--help',    '-h',       GetoptLong::NO_ARGUMENT ],
[ '--debug',   '-d',       GetoptLong::NO_ARGUMENT ],
[ '--info',    '-i',       GetoptLong::NO_ARGUMENT ],
[ '--warn',    '-w',       GetoptLong::NO_ARGUMENT ],
[ '--repo',    '-r',       GetoptLong::REQUIRED_ARGUMENT ],
[ '--host',                GetoptLong::REQUIRED_ARGUMENT ],
[ '--port',                GetoptLong::REQUIRED_ARGUMENT ],
[ '--path',                GetoptLong::REQUIRED_ARGUMENT ]
).each do |opt, arg|
  case opt
  when "--help"
    usage
    exit 0
  when "--debug"
    log_level = Logger::DEBUG
  when "--info"
    log_level = Logger::INFO
  when "--warn"
    log_level = Logger::WARN
  when "--host"
    host = arg
  when "--port"
    port = arg
  when "--path"
    path = arg
  when "--repo"
    repo = arg
  else
    warn "unknown option: #{opt}"
    usage
    exit 1
  end
end

unless host && port && path && repo
  usage
  exit 1
end

# Open log.

log = Logger.new(STDERR)
log.datetime_format = '%Y-%m-%d %H:%M:%S '
log.level = log_level

# Connect to Sesame server.

log.info('begin session')
session = RDF::Sesame::Session.new(host, port, path, log)
raise 'no session' unless session
log.info('create model')
model = session.model(repo)
raise 'no model' unless model

nsm = {}
namespace_by_prefix = {}
model.namespaces.map do |defn|
  prf = defn.prefix.to_s
  ns = defn.namespace.to_s
  nsm[prf] = RDF::NamespaceMap.new(ns)
  namespace_by_prefix[prf] = ns
end
RDF::Uri.ns_by_prf = namespace_by_prefix

# Create namespace definition string.

NS_DEFS = nsm.map do |prf, ns|
  "PREFIX #{prf}:#{nsm[prf][''].to_uriref}"
end.join("\n")

# Create from clauses for ontologies query.

FILTER_EXPR = ARGV.map { |a| "?ontology = #{RDF::Uri.new(a).to_uriref}" }.join(' || ')

# Find ontologies and imports.

log.info('find ontologies and imports')
qstring = %Q{
  #{NS_DEFS}
  select distinct ?ontology ?import
  where {
    ?ontology rdf:type owl:Ontology .
    optional {
      ?ontology owl:imports ?import .
    }
  }
}
log.debug(qstring)
model.query({'query' => qstring, 'infer' => 'false'}) do |resp|
  ontology = RDF::Uri.new(resp.ontology.to_s)
  if import = resp.import
    import = RDF::Uri.new(import.to_s)
    imports_by_ontology[ontology] << import
    log.debug("#{ontology} imports #{import}")
  end
end
log.debug("imports_by_ontology: #{imports_by_ontology.inspect}")

# Construct closures and ontology lists.

imce_ontologies = ARGV.inject(Set.new) do |m, o|
  u = RDF::Uri.new(o)
  m << u
  closure = imports_by_ontology.close(u, WWW_OMG_ORG_RE)
  closure_by_ontology[u] = closure
  m += closure
end
log.debug("imce ontologies: #{imce_ontologies.inspect}")

omg_ontologies = imports_by_ontology.keys.select { |o| o =~ WWW_OMG_ORG_RE }
log.debug("omg ontologies: #{omg_ontologies.inspect}")

# Construct query contexts.

log.info('construct query contexts')

contexts = {}
from_clauses = {}
from_named_clauses = {}
entailments = %w{ /ClassEntailments /PropertyEntailments } << ''
ontology_lists = { 'imce' => imce_ontologies,'omg' => omg_ontologies }

ontology_lists.each do |key, ontology_list|
  contexts[key] = ch = {}
  from_clauses[key] = fh = {}
  from_named_clauses[key] = nh = {}
  entailments.each do |entailment|
    ch[entailment] = ontology_list.map { |o| o.context(entailment) }
    log.debug("contexts[#{key}][#{entailment}] = #{ch[entailment]}")
    fh[entailment] = ch[entailment].map { |c| "from #{c}" }.join("\n")
    log.debug("from_clauses[#{key}][#{entailment}] = #{fh[entailment]}")
    nh[entailment] = ch[entailment].map { |c| "from named #{c}" }.join("\n")
    log.debug("from_named_clauses[#{key}][#{entailment}] = #{nh[entailment]}")
  end
end

# Class embedding.

suites << suite = TestSuite.new('class embedding', [])
suite.query_handler_pairs << query_handler_pair = QueryHandlerPair.new
  
query_handler_pair.query = %Q{

  #{NS_DEFS}

  select distinct ?klass ?mapped ?embedding_ok

  # Search IMCE and OMG contexts. Include subclass entailments in IMCE contexts.
  
  #{from_clauses['imce']['']}
  #{from_clauses['omg']['']}
  #{from_clauses['imce']['/ClassEntailments']}
  #{from_clauses['omg']['/ClassEntailments']}

  where {

    # Find a class and its annotations.
  
    ?klass rdf:type owl:Class .
    optional {
      ?klass annotation:noMapping ?klass_noMapping .
    }
    optional {
      ?klass annotation:isAbstract ?klass_isAbstract . 
    }

    # Ensure that any class without isAbstract is mapped to an OMG class
    # without isAbstract.
  
    optional {
      ?klass rdfs:subClassOf ?super2 .
      ?super2 rdfs:subClassOf UML:Element .
      optional {
        ?super2 annotation:isAbstract ?super2_isAbstract .
      }
      filter (((bound(?klass_isAbstract) && ?klass_isAbstract) || !(bound(?super2_isAbstract) && ?super2_isAbstract))
        && regex(str(?super2), "#{WWW_OMG_ORG_SPARQL_RE}", "i"))
    }
  
    # Bind to boolean results.
  
    bind(exists { ?klass rdfs:subClassOf UML:Element} as ?mapped)
    bind(bound(?super2) as ?embedding_ok)
  
    # Restrict class to IMCE namespace, ignore Thing in any namespace, ignore classes
    # with noMapping annotation set to true.
  
    filter (
      regex(str(?klass), "#{IMCE_JPL_NASA_GOV_SPARQL_RE}", "i")
      && !regex(str(?klass), "-embedding")
      && !(bound(?klass_noMapping) && ?klass_noMapping)
      && !regex(str(?klass), "#Thing$")
    )
  }
  order by ?klass
}

query_handler_pair.handler = proc do |result|
  klass = result.klass.to_qname
  mapped = result.mapped.to_s == 'true'
  embedding_ok = result.embedding_ok.to_s == 'true'
  unless pass = mapped && embedding_ok
    insert = mapped ? 'concrete ' : ' '
  end
  text = "no #{insert}embedding for #{insert}#{klass}"
  log.debug("#{klass} mapped #{mapped} ok #{embedding_ok}")
  TestCase.new(klass, pass, text)
end

# Object property embedding.

suites << suite = TestSuite.new('object property embedding', [])
suite.query_handler_pairs << query_handler_pair = QueryHandlerPair.new
  
query_handler_pair.query = %Q{

  #{NS_DEFS}

  select distinct ?oprop ?chain_exists ?relclass_exists ?relclass_mapped
                  ?srcprop_exists ?srcprop_mapped ?trgprop_exists ?trgprop_mapped
                  ?srcprop_range_ok ?trgprop_range_ok

  #{from_clauses['imce']['']}
  #{from_clauses['imce']['/ClassEntailments']}
  #{from_clauses['imce']['/PropertyEntailments']}

  where {

    # Find an object property.
  
    ?oprop rdf:type owl:ObjectProperty .

    optional {
      ?oprop annotation:noMapping ?oprop_noMapping .
    }

    optional {
      ?oprop annotation:isDerived ?oprop_isDerived .
    }

    optional {
    
      # find property chain axiom.
      
      ?oprop owl:propertyChainAxiom ?chain .

      optional {

        # find first clause with inverse source property.
      
        ?chain rdf:first [ owl:inverseOf ?srcprop ; ] .
        ?srcprop rdf:type owl:FunctionalProperty .
      
        # Find second clause with target property
      
        ?chain rdf:rest [ rdf:first ?trgprop ; ] .
        ?trgprop rdf:type owl:FunctionalProperty .
      
        optional {
      
          # find relationship class
      
          ?srcprop rdfs:domain ?relclass .
          ?trgprop rdfs:domain ?relclass .

        }

        # find domain and range of object property, ranges of source and target properties.

        optional {
          ?srcprop rdfs:range ?srcprop_range .
        }
        optional {
          ?trgprop rdfs:range ?trgprop_range .
        }
      }
      optional {
        ?oprop rdfs:domain ?oprop_domain .
      }
      optional {
        ?oprop rdfs:range ?oprop_range .
      }
    }

    bind(bound(?chain) as ?chain_exists)
    
    bind(bound(?srcprop) as ?srcprop_exists)
    bind(?srcprop_exists && exists { ?srcprop rdfs:subPropertyOf owl2-mof2-embedding:topReifiedObjectPropertySource } as ?srcprop_fwd_mapped)
    bind(?srcprop_exists && exists { ?srcprop rdfs:subPropertyOf owl2-mof2-embedding:topReifiedObjectPropertyTarget } as ?srcprop_rev_mapped)
    bind(((bound(?oprop_isDerived) && ?oprop_isDerived && ?srcprop_rev_mapped) || ?srcprop_fwd_mapped) as ?srcprop_mapped)
    
    bind(bound(?trgprop) as ?trgprop_exists)
    bind(?trgprop_exists && exists { ?trgprop rdfs:subPropertyOf owl2-mof2-embedding:topReifiedObjectPropertyTarget } as ?trgprop_fwd_mapped)
    bind(?trgprop_exists && exists { ?trgprop rdfs:subPropertyOf owl2-mof2-embedding:topReifiedObjectPropertySource } as ?trgprop_rev_mapped)
    bind(((bound(?oprop_isDerived) && ?oprop_isDerived && ?trgprop_rev_mapped) || ?trgprop_fwd_mapped) as ?trgprop_mapped)
        
    bind(bound(?relclass) as ?relclass_exists)
    bind(?relclass_exists && exists { ?relclass rdfs:subClassOf owl2-mof2-embedding:ReifiedObjectProperty } as ?relclass_mapped)

    bind((!bound(?oprop_domain) && !bound(?srcprop_range)) || (bound(?oprop_domain) && bound(?srcprop_range) && ?oprop_domain = ?srcprop_range) as ?srcprop_range_ok)
    bind((!bound(?oprop_range)  && !bound(?trgprop_range)) || (bound(?oprop_range)  && bound(?trgprop_range) && ?oprop_range  = ?trgprop_range) as ?trgprop_range_ok)
    
    # Restrict object property to IMCE namespace, ignore Thing in any namespace,
    # ignore object properties with noMapping annotation set to true.
    
    filter (
      regex(str(?oprop), "#{IMCE_JPL_NASA_GOV_SPARQL_RE}", "i")
      && !regex(str(?oprop), "-embedding")
      && !(bound(?oprop_noMapping) && ?oprop_noMapping)
      && !regex(str(?oprop), "#topObjectProperty$")
     )
  }

  order by ?oprop
}

query_handler_pair.handler = proc do |result|
  flags = {
    :chain_exists => "No property chain.",
    :srcprop_exists => "No source property.",
    :trgprop_exists => "No target property.",
    :relclass_exists => "No reification class.",
    :srcprop_mapped => "Source property not mapped.",
    :trgprop_mapped => "Target property not mapped.",
    :relclass_mapped => "Reification class not mapped.",
    :srcprop_range_ok => "Source property range not correct.",
    :trgprop_range_ok => "Target property range not correct."
  }
  oprop = result.oprop.to_qname
  texts = flags.inject([]) do |memo, pair|
    method, text = *pair
    memo << text if result.send(method).false?
    memo
  end
  if texts.empty?
    pass = true
    text = nil
  else
    pass = false
    text = texts.join(' ')
  end
  TestCase.new(oprop, pass, text)
end

# Object property embedding.

suites << suite = TestSuite.new('object property inverse pairs', [])
suite.query_handler_pairs << query_handler_pair = QueryHandlerPair.new
  
query_handler_pair.query = %Q{

  #{NS_DEFS}
  
  select distinct ?property ?inverse ?inverse_ok
  
  #{from_clauses['imce']['']}
  #{from_clauses['imce']['/PropertyEntailments']}

  where {
  
    ?property rdf:type owl:ObjectProperty .
    ?property owl:inverseOf ?inverse .
    optional { ?property annotation:isDerived ?property_isDerived . }
    optional { ?inverse annotation:isDerived ?inverse_isDerived . }
      
    minus { ?property annotation:noMapping "true"^^xsd:boolean . }

    bind((bound(?property_isDerived) && ?property_isDerived) as ?property_isDerived)
    bind((bound(?inverse_isDerived) && ?inverse_isDerived) as ?inverse_isDerived)

    bind((?property_isDerived && !?inverse_isDerived) || (?inverse_isDerived && !?property_isDerived) as ?inverse_ok)
  }
}

query_handler_pair.handler = proc do |result|
  oprop = result.property.to_qname
  iprop = result.inverse.to_qname
  if pass = result.inverse_ok.true?
    text = nil
  else
    text = "No isDerived annotation for inverse #{iprop}."
  end
  TestCase.new(oprop, pass, text)
end

# Execute test suites.

suites.each do |suite|
  suite.cases = []
  log.info("execute test suite #{suite.name}")
  suite.query_handler_pairs.each do |p|
    log.debug("query: #{p.query}")
    suite.cases += model.query({ 'query' => p.query, 'infer' => 'false'}).map(&p.handler)
  end
end

# Construct output document.

doc = REXML::Document.new
doc << ss = REXML::Element.new('testsuites')
suites.sort_by { |s| s.name }.each do |suite|
  ss << su = REXML::Element.new('testsuite')
  su.add_attribute('name', suite.name)
  suite.cases.sort_by { |c| c.name }.each do |testcase|
    su << tc = REXML::Element.new('testcase')
    tc.add_attribute('name', testcase.name)
    unless testcase.pass
      tc << fl = REXML::Element.new('failure')
      fl.text = testcase.text
    end
  end
end

# Write output.

doc.write(STDOUT, 1)

# End session.

log.info('end')
session.finish
