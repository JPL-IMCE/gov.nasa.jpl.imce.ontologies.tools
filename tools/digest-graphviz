#!/usr/bin/env ruby

#--
#
#    $HeadURL$
#
#    $LastChangedRevision$
#    $LastChangedDate$
#
#    $LastChangedBy$
#
#    Copyright (c) 2008-2014 California Institute of Technology.
#    All rights reserved.
#
#++

require 'getoptlong'
require 'graphviz'
require 'logger'
require 'rexml/document'
require 'set'
require 'time'
require 'yaml'

require 'jpl/rdf/sesame'

# Define constants.

# Define modules.

module DigestToGraphviz
  
  class Ontology
    
    @classes = {}
    @properties = {}
    @superclasses = Hash.new { |h, k| h[k] = Set.new }
    @superproperties = Hash.new { |h, k| h[k] = Set.new }
    @triples = []
      
    def add_class(klass)
      @classes[klass.name] = klass
      klass.ontology = self
    end
    def class_by_name(name)
      @classes[name]
    end
    def relate_superclass(klass, superklass)
      @superclasses[klass.name] << superklass
    end
    def add_property(property)
      @properties[property.name] = property
      property.ontology = self
    end
    def property_by_name(name)
      @properties[name]
    end
    def relate_superproperty(property, superproperty)
      @superproperties[property.name] << superproperty
    end
    
  end
  
  class Entity
    def initialize(name)
      @name = name
      @ontology = nil
    end
    attr_reader :name
    attr_accessor :ontology
  end
  
  class OwlOntology < Ontology
    def self.Klass
      OwlKlass
    end
    def self.Property
      OwlProperty
    end
  end

  class OwlEntity < Entity
  end
  
  class OwlClass < OwlEntity
  end
  
  class OwlProperty < OwlEntity
  end
  
  class GraphvizOntology < Ontology
    
    def self.Class
      GraphvizClass
    end
    
    def self.Property
      GraphvizProperty
    end
    
    def initialize
      g = GraphViz.new('G', {'output' => 'dot'})
      g['rankdir'] = 'BT'
      #g['size'] = '6.75, 10.0'
      #g['overlap'] = 'scale'
      g['sep'] = "0.2, 0.2"
      g.node['shape'] = 'record'
      g.node['fontname'] = 'Arial'
      g.node['fontsize'] = '8.0'
      g.edge['fontname'] = 'Arial'
      g.edge['fontsize'] = '7.0'
    end
    
    def add_class(klass)
      super
      g.add_node(klass.id, {:label => klass.name})
    end
    
    def add_property(property)
      super
      g.add_property(property.id, {:label => property.name})
    end
  end
  
  class GraphvizEntity < Entity
    
    attr_accessor :id
    
    def initialize(name)
      super
      @id = name.tag
    end
    
  end
  
  class GraphvizKlass < GraphvizEntity
  end
  
  class GraphvizProperty < GraphvizProperty   
  end

  class Transform
    def initialize
      @map = {}
    end
    
    def map_class(from_klass)
      unless map[from_klass]
        to_klass = @to_ontology.Klass.new(from_klass.name)
        @map[from_klass] = to_klass
        @from_ontology.add_class(to_klass)
      end
    end
      
    def run(from_ontology, to_ontology)
      @from_ontology = from_ontology
      @to_ontology = to_ontology
      
      @from_ontology.each_class do |from_klass|
        map_class(from_klass)
      end
    end
    
  end
  
end

# Define utility functions.

class String
  def tag
    gsub(/[^[:alnum:]]/, '_')
  end
end

log_level = Logger::FATAL

# Process arguments.

def usage
  warn 'digest-graphviz [ digest ]'
end

GetoptLong.new(
[ '--config',  '-c',       GetoptLong::REQUIRED_ARGUMENT ],
[ '--help',    '-h',       GetoptLong::NO_ARGUMENT ],
[ '--debug',   '-d',       GetoptLong::NO_ARGUMENT ],
[ '--info',    '-i',       GetoptLong::NO_ARGUMENT ],
[ '--warn',    '-w',       GetoptLong::NO_ARGUMENT ],
[ '--date',                GetoptLong::REQUIRED_ARGUMENT ],
[ '--ns',                  GetoptLong::REQUIRED_ARGUMENT ]
).each do |opt, arg|
  case opt
  when "--help"
    usage
    exit 0
  when "--debug"
    log_level = Logger::DEBUG
    indent = 1
  when "--info"
    log_level = Logger::INFO
  when "--warn"
    log_level = Logger::WARN
  when "--ns"
    ns = arg
  else
    usage
    exit 1
  end
end

# Open log.

log = Logger.new(STDERR)
log.datetime_format = '%Y-%m-%d %H:%M:%S '
log.level = log_level

# Open GraphViz graph.

g = GraphViz.new('G', {'output' => 'dot'})
g['rankdir'] = 'BT'
#g['size'] = '6.75, 10.0'
#g['overlap'] = 'scale'
g['sep'] = "0.2, 0.2"
g.node['shape'] = 'record'
g.node['fontname'] = 'Arial'
g.node['fontsize'] = '8.0'
g.edge['fontname'] = 'Arial'
g.edge['fontsize'] = '7.0'

# Write graph

g.output

log.info('done')
