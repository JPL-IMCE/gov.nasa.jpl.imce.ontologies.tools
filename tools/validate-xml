#!/usr/bin/env ruby

#--
#
#    $HeadURL$
#
#    $LastChangedRevision$
#    $LastChangedDate$
#
#    $LastChangedBy$
#
#    Copyright (c) 2008-2014 California Institute of Technology.
#    All rights reserved.
#
#++

require 'getoptlong'
require 'logger'
require 'rexml/document'

# Define variables.

status = 0

# Process arguments.

def usage
  warn 'validate-xml [ files ]'
end

log_level = Logger::FATAL

GetoptLong.new(
  [ '--help',    '-h',       GetoptLong::NO_ARGUMENT ],
  [ '--debug',   '-d',       GetoptLong::NO_ARGUMENT ],
  [ '--info',    '-i',       GetoptLong::NO_ARGUMENT ],
  [ '--warn',    '-w',       GetoptLong::NO_ARGUMENT ]
).each do |opt, arg|
  case opt
  when "--help"
    usage
    exit 0
  when "--debug"
    log_level = Logger::DEBUG
  when "--info"
    log_level = Logger::INFO
  when "--warn"
    log_level = Logger::WARN
  else
    usage
    exit 1
  end
end

# Open log.

log = Logger.new(STDERR)
log.datetime_format = '%Y-%m-%d %H:%M:%S '
log.level = log_level

include REXML

XMLLINT = 'xmllint'
XMLLINT_OPTS = ' --noout'


doc = Document.new
doc << tss = Element.new('testsuites')

  tss << ts = Element.new('testsuite')
  ts.add_attribute('name', 'validity')
  ARGV.each do |ont|
    ts << tc = Element.new('testcase')
    tc.add_attribute('name', ont)
    log.info("test case: #{ont}")
    cmd = "sh -c '#{XMLLINT} #{XMLLINT_OPTS} #{ont} 2>&1'"
    log.debug("cmd: #{cmd}")
    result = %x{#{cmd}}
    log.debug("result: #{result}")
    unless $?.success?
      tc << fl = Element.new('failure')
      fl << CData.new(result)
      status += 1
    end
  end

log.debug('write output')
doc.write(STDOUT, 2)

exit(status)
