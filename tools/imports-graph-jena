#!/usr/bin/env ruby

#--
#
#    $HeadURL$
#
#    $LastChangedRevision$
#    $LastChangedDate$
#
#    $LastChangedBy$
#
#    Copyright (c) 2008-2014 California Institute of Technology.
#    All rights reserved.
#
#++

require 'set'
require 'yaml'

require 'OWLAPIApplication'
require 'OntologyBundles'

APPLICATION_NAME = 'imports-graph-jena'

class ImportsGraphApplication < OWLAPIApplication
  
  def run
    
    option_parser.on('--bundles FILE', 'bundles serialization file (required)') do |v|
      @options.bundles = v
    end

    option_parser.on('--parts FILE', 'parts serialization file (required)') do |v|
      @options.parts = v
    end

    super
    
    unless @options.bundles
      log(FATAL, 'no bundles serialization file')
      return 1
    end
    
    unless @options.parts
      log(FATAL, 'no parts serialization file')
      return 1
    end
    
    unless @options.location_mapping
      log(FATAL, 'no location mapping specified')
      return 1
    end

    # Parse bundles data.
    
    log(INFO, 'load ontology bundles data')
    bundle_by_uri = Marshal.load(File.open(@options.bundles, 'rb'))
    log(DEBUG, "ontology bundles #{bundle_by_uri.inspect}")

    # Parse parts data.
    
    log(INFO, 'load ontology parts data')
    part_by_uri = Marshal.load(File.open(@options.parts, 'rb'))
    log(DEBUG, "ontology parts #{part_by_uri.inspect}")

    # Create ontology manager.
    
    log(DEBUG, 'create ontology manager')
    manager = OWLManager.create_owl_ontology_manager
    manager.setSilentMissingImportsHandling(true)
    log(DEBUG, 'add location mappers')
    location_mappers.each do |mapper|
      manager.add_iri_mapper(mapper)
    end
   
    # Load ontologies.
    
    ontologies = ARGV.map do |arg|
      log(DEBUG, "load ontology #{arg}")
      manager.loadOntology(IRI.create(arg))
    end
    
    # Find imports and closure for each ontology.
    
    imports_by_ontology = {}
    closure_by_ontology = {}
    ontologies.each do |ontology|
      key = ontology.getOntologyID.getOntologyIRI.to_s
      imports_by_ontology[key] = ontology.getDirectImports.map { |o| o.getOntologyID.getOntologyIRI.to_s }
      closure_by_ontology[key] = ontology.getImports.map { |o| o.getOntologyID.getOntologyIRI.to_s }
    end
    
    # Add dependencies for bundle closure ontologies.
    
    bundle_by_uri.each do |name, bundle|
      
      # bundle closure
      
      to_close = [bco = bundle.iri]
      i = Set.new
      i += bundle.groups.inject([]) do |m, g|
        m += g.non_embedding_parts.map { |p| p.iri }
      end
      i += bundle.imported_bundles.select { |b| b.type == 'imce' }.map { |b| b.iri }
      imports_by_ontology[bco] = i
      i.each do |ii|
        log(DEBUG, "#{bco} imports #{ii}")
      end
      
      if bundle.type == 'imce'
        
        # bundle closure embedding
        
        to_close << (bceo = bundle.embedding_iri)
        i = Set.new
        i += bundle.groups.inject([]) do |m, g|
          m += g.parts.map { |p| p.iri }
        end
        i << bundle.iri
        i += bundle.imported_bundles.select { |b| b.type == 'imce' }.map { |b| b.embedding_iri }
        imports_by_ontology[bceo] = i
        i.each do |ii|
          log(DEBUG, "#{bceo} imports #{ii}")
        end
      end
      
      to_close.each do |o|
        closure_by_ontology[o] = imports_by_ontology[o].inject(Set.new) do |m, i|
          m << i
          m += closure_by_ontology[i]
          m
        end
      end
      
    end
    
    # Clean up hashes for yaml output.
    
    closure_by_ontology.each do |ontology, closure|
      closure_by_ontology[ontology] = closure.to_a.sort
    end
    imports_by_ontology.each do |ontology, imports|
      imports_by_ontology[ontology] = imports.to_a.sort
    end
    
    # Collect ontology types.
    
    bundle = []
    embedding = []
    view = []
    metamodel = []
    imports_by_ontology.keys.each do |uri|
      next unless ontology = part_by_uri[uri]
      embedding << uri if ontology.is_embedding?
      view << uri if ontology.is_view?
      metamodel << uri if ontology.is_metamodel?
    end
    bundle_by_uri.values.each do |b|
      bundle << b.iri
      if b.type == 'imce'
        bundle << b.embedding_iri
        embedding << b.embedding_iri
      end
    end

    # Consolidate output hashes.
    
    output = { 'imports' => imports_by_ontology, 'closure' => closure_by_ontology,
      'bundle' => bundle.sort, 'embedding' => embedding.sort, 'view' => view.sort, 'metamodel' => metamodel.sort }
      
    # Write output.
    
    puts output.to_yaml
    
    # Exit.
    
    return 0
    
  end
end

exit(ImportsGraphApplication.new(APPLICATION_NAME).start)
